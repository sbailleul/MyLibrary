/* 
 * Library API
 *
 * Through this API you can access authors and their books
 *
 * OpenAPI spec version: 1.0
 * Contact: bailleul.sacha@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the books for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <returns>List&lt;Book&gt;</returns>
        List<Book> ApiVversionAuthorsAuthorIdBooksGet (Guid? authorId, string version);

        /// <summary>
        /// Get the books for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;Book&gt;</returns>
        ApiResponse<List<Book>> ApiVversionAuthorsAuthorIdBooksGetWithHttpInfo (Guid? authorId, string version);
        /// <summary>
        /// Create a book for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Book</returns>
        Book CreateBook (Guid? authorId, string version, BookForCreation body = null);

        /// <summary>
        /// Create a book for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>ApiResponse of Book</returns>
        ApiResponse<Book> CreateBookWithHttpInfo (Guid? authorId, string version, BookForCreation body = null);
        /// <summary>
        /// Create a book for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Book</returns>
        Book CreateBook (Guid? authorId, string version, BookForCreationWithAmountOfPages body = null);

        /// <summary>
        /// Create a book for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>ApiResponse of Book</returns>
        ApiResponse<Book> CreateBookWithHttpInfo (Guid? authorId, string version, BookForCreationWithAmountOfPages body = null);
        /// <summary>
        /// Get a book by id for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the book author</param>
        /// <param name="bookId">The id of the book</param>
        /// <param name="version"></param>
        /// <returns>Book</returns>
        Book GetBook (Guid? authorId, Guid? bookId, string version);

        /// <summary>
        /// Get a book by id for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the book author</param>
        /// <param name="bookId">The id of the book</param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Book</returns>
        ApiResponse<Book> GetBookWithHttpInfo (Guid? authorId, Guid? bookId, string version);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the books for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;Book&gt;</returns>
        System.Threading.Tasks.Task<List<Book>> ApiVversionAuthorsAuthorIdBooksGetAsync (Guid? authorId, string version);

        /// <summary>
        /// Get the books for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;Book&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Book>>> ApiVversionAuthorsAuthorIdBooksGetAsyncWithHttpInfo (Guid? authorId, string version);
        /// <summary>
        /// Create a book for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Task of Book</returns>
        System.Threading.Tasks.Task<Book> CreateBookAsync (Guid? authorId, string version, BookForCreation body = null);

        /// <summary>
        /// Create a book for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Task of ApiResponse (Book)</returns>
        System.Threading.Tasks.Task<ApiResponse<Book>> CreateBookAsyncWithHttpInfo (Guid? authorId, string version, BookForCreation body = null);
        /// <summary>
        /// Create a book for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Task of Book</returns>
        System.Threading.Tasks.Task<Book> CreateBookAsync (Guid? authorId, string version, BookForCreationWithAmountOfPages body = null);

        /// <summary>
        /// Create a book for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Task of ApiResponse (Book)</returns>
        System.Threading.Tasks.Task<ApiResponse<Book>> CreateBookAsyncWithHttpInfo (Guid? authorId, string version, BookForCreationWithAmountOfPages body = null);
        /// <summary>
        /// Get a book by id for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the book author</param>
        /// <param name="bookId">The id of the book</param>
        /// <param name="version"></param>
        /// <returns>Task of Book</returns>
        System.Threading.Tasks.Task<Book> GetBookAsync (Guid? authorId, Guid? bookId, string version);

        /// <summary>
        /// Get a book by id for a specific author
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the book author</param>
        /// <param name="bookId">The id of the book</param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (Book)</returns>
        System.Threading.Tasks.Task<ApiResponse<Book>> GetBookAsyncWithHttpInfo (Guid? authorId, Guid? bookId, string version);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BooksApi : IBooksApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BooksApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksApi"/> class
        /// </summary>
        /// <returns></returns>
        public BooksApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BooksApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the books for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <returns>List&lt;Book&gt;</returns>
        public List<Book> ApiVversionAuthorsAuthorIdBooksGet (Guid? authorId, string version)
        {
             ApiResponse<List<Book>> localVarResponse = ApiVversionAuthorsAuthorIdBooksGetWithHttpInfo(authorId, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the books for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;Book&gt;</returns>
        public ApiResponse< List<Book> > ApiVversionAuthorsAuthorIdBooksGetWithHttpInfo (Guid? authorId, string version)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling BooksApi->ApiVversionAuthorsAuthorIdBooksGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling BooksApi->ApiVversionAuthorsAuthorIdBooksGet");

            var localVarPath = "/api/v{version}/authors/{authorId}/books";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVversionAuthorsAuthorIdBooksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Book>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Book>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Book>)));
        }

        /// <summary>
        /// Get the books for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;Book&gt;</returns>
        public async System.Threading.Tasks.Task<List<Book>> ApiVversionAuthorsAuthorIdBooksGetAsync (Guid? authorId, string version)
        {
             ApiResponse<List<Book>> localVarResponse = await ApiVversionAuthorsAuthorIdBooksGetAsyncWithHttpInfo(authorId, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the books for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;Book&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Book>>> ApiVversionAuthorsAuthorIdBooksGetAsyncWithHttpInfo (Guid? authorId, string version)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling BooksApi->ApiVversionAuthorsAuthorIdBooksGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling BooksApi->ApiVversionAuthorsAuthorIdBooksGet");

            var localVarPath = "/api/v{version}/authors/{authorId}/books";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVversionAuthorsAuthorIdBooksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Book>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Book>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Book>)));
        }

        /// <summary>
        /// Create a book for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Book</returns>
        public Book CreateBook (Guid? authorId, string version, BookForCreation body = null)
        {
             ApiResponse<Book> localVarResponse = CreateBookWithHttpInfo(authorId, version, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a book for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>ApiResponse of Book</returns>
        public ApiResponse< Book > CreateBookWithHttpInfo (Guid? authorId, string version, BookForCreation body = null)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling BooksApi->CreateBook");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling BooksApi->CreateBook");

            var localVarPath = "/api/v{version}/authors/{authorId}/books";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/vnd.martin.bookforcreation+json", 
                "application/vnd.martin.bookforcreationwithamountofpages+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Book>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Book) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Book)));
        }

        /// <summary>
        /// Create a book for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Task of Book</returns>
        public async System.Threading.Tasks.Task<Book> CreateBookAsync (Guid? authorId, string version, BookForCreation body = null)
        {
             ApiResponse<Book> localVarResponse = await CreateBookAsyncWithHttpInfo(authorId, version, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a book for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Task of ApiResponse (Book)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Book>> CreateBookAsyncWithHttpInfo (Guid? authorId, string version, BookForCreation body = null)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling BooksApi->CreateBook");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling BooksApi->CreateBook");

            var localVarPath = "/api/v{version}/authors/{authorId}/books";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/vnd.martin.bookforcreation+json", 
                "application/vnd.martin.bookforcreationwithamountofpages+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Book>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Book) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Book)));
        }

        /// <summary>
        /// Create a book for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Book</returns>
        public Book CreateBook (Guid? authorId, string version, BookForCreationWithAmountOfPages body = null)
        {
             ApiResponse<Book> localVarResponse = CreateBookWithHttpInfo(authorId, version, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a book for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>ApiResponse of Book</returns>
        public ApiResponse< Book > CreateBookWithHttpInfo (Guid? authorId, string version, BookForCreationWithAmountOfPages body = null)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling BooksApi->CreateBook");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling BooksApi->CreateBook");

            var localVarPath = "/api/v{version}/authors/{authorId}/books";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/vnd.martin.bookforcreation+json", 
                "application/vnd.martin.bookforcreationwithamountofpages+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Book>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Book) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Book)));
        }

        /// <summary>
        /// Create a book for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Task of Book</returns>
        public async System.Threading.Tasks.Task<Book> CreateBookAsync (Guid? authorId, string version, BookForCreationWithAmountOfPages body = null)
        {
             ApiResponse<Book> localVarResponse = await CreateBookAsyncWithHttpInfo(authorId, version, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a book for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author</param>
        /// <param name="version"></param>
        /// <param name="body">The book to create (optional)</param>
        /// <returns>Task of ApiResponse (Book)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Book>> CreateBookAsyncWithHttpInfo (Guid? authorId, string version, BookForCreationWithAmountOfPages body = null)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling BooksApi->CreateBook");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling BooksApi->CreateBook");

            var localVarPath = "/api/v{version}/authors/{authorId}/books";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/vnd.martin.bookforcreation+json", 
                "application/vnd.martin.bookforcreationwithamountofpages+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Book>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Book) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Book)));
        }

        /// <summary>
        /// Get a book by id for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the book author</param>
        /// <param name="bookId">The id of the book</param>
        /// <param name="version"></param>
        /// <returns>Book</returns>
        public Book GetBook (Guid? authorId, Guid? bookId, string version)
        {
             ApiResponse<Book> localVarResponse = GetBookWithHttpInfo(authorId, bookId, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a book by id for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the book author</param>
        /// <param name="bookId">The id of the book</param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Book</returns>
        public ApiResponse< Book > GetBookWithHttpInfo (Guid? authorId, Guid? bookId, string version)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling BooksApi->GetBook");
            // verify the required parameter 'bookId' is set
            if (bookId == null)
                throw new ApiException(400, "Missing required parameter 'bookId' when calling BooksApi->GetBook");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling BooksApi->GetBook");

            var localVarPath = "/api/v{version}/authors/{authorId}/books/{bookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.marvin.book+json",
                "application/json",
                "application/xml",
                "application/vnd.marvin.bookwithconcatenatedauthorname+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (bookId != null) localVarPathParams.Add("bookId", this.Configuration.ApiClient.ParameterToString(bookId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Book>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Book) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Book)));
        }

        /// <summary>
        /// Get a book by id for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the book author</param>
        /// <param name="bookId">The id of the book</param>
        /// <param name="version"></param>
        /// <returns>Task of Book</returns>
        public async System.Threading.Tasks.Task<Book> GetBookAsync (Guid? authorId, Guid? bookId, string version)
        {
             ApiResponse<Book> localVarResponse = await GetBookAsyncWithHttpInfo(authorId, bookId, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a book by id for a specific author 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the book author</param>
        /// <param name="bookId">The id of the book</param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (Book)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Book>> GetBookAsyncWithHttpInfo (Guid? authorId, Guid? bookId, string version)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling BooksApi->GetBook");
            // verify the required parameter 'bookId' is set
            if (bookId == null)
                throw new ApiException(400, "Missing required parameter 'bookId' when calling BooksApi->GetBook");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling BooksApi->GetBook");

            var localVarPath = "/api/v{version}/authors/{authorId}/books/{bookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.marvin.book+json",
                "application/json",
                "application/xml",
                "application/vnd.marvin.bookwithconcatenatedauthorname+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (bookId != null) localVarPathParams.Add("bookId", this.Configuration.ApiClient.ParameterToString(bookId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Book>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Book) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Book)));
        }

    }
}
