/* 
 * Library API
 *
 * Through this API you can access authors and their books
 *
 * OpenAPI spec version: 1.0
 * Contact: bailleul.sacha@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAuthorsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get an author by her/his id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to get</param>
        /// <param name="version"></param>
        /// <returns>Author</returns>
        Author ApiVversionAuthorsAuthorIdGet (Guid? authorId, string version);

        /// <summary>
        /// Get an author by her/his id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to get</param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Author</returns>
        ApiResponse<Author> ApiVversionAuthorsAuthorIdGetWithHttpInfo (Guid? authorId, string version);
        /// <summary>
        /// Partially update and author
        /// </summary>
        /// <remarks>
        /// Sample request (this request update the author&#x27;s **first name**)   &#x60;&#x60;&#x60;json  PATCH /authors/id  [       {           \&quot;op\&quot;: \&quot;replace\&quot;,           \&quot;path\&quot;: \&quot;/firstname\&quot;,           \&quot;value\&quot;: \&quot;new first name\&quot;       }   ]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to update</param>
        /// <param name="version"></param>
        /// <param name="body">The set of operations to apply to author (optional)</param>
        /// <returns>Author</returns>
        Author ApiVversionAuthorsAuthorIdPatch (Guid? authorId, string version, List<Operation> body = null);

        /// <summary>
        /// Partially update and author
        /// </summary>
        /// <remarks>
        /// Sample request (this request update the author&#x27;s **first name**)   &#x60;&#x60;&#x60;json  PATCH /authors/id  [       {           \&quot;op\&quot;: \&quot;replace\&quot;,           \&quot;path\&quot;: \&quot;/firstname\&quot;,           \&quot;value\&quot;: \&quot;new first name\&quot;       }   ]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to update</param>
        /// <param name="version"></param>
        /// <param name="body">The set of operations to apply to author (optional)</param>
        /// <returns>ApiResponse of Author</returns>
        ApiResponse<Author> ApiVversionAuthorsAuthorIdPatchWithHttpInfo (Guid? authorId, string version, List<Operation> body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId"></param>
        /// <param name="version"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Author</returns>
        Author ApiVversionAuthorsAuthorIdPut (Guid? authorId, string version, AuthorForUpdate body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId"></param>
        /// <param name="version"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Author</returns>
        ApiResponse<Author> ApiVversionAuthorsAuthorIdPutWithHttpInfo (Guid? authorId, string version, AuthorForUpdate body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>List&lt;Author&gt;</returns>
        List<Author> ApiVversionAuthorsGet (string version);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;Author&gt;</returns>
        ApiResponse<List<Author>> ApiVversionAuthorsGetWithHttpInfo (string version);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get an author by her/his id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to get</param>
        /// <param name="version"></param>
        /// <returns>Task of Author</returns>
        System.Threading.Tasks.Task<Author> ApiVversionAuthorsAuthorIdGetAsync (Guid? authorId, string version);

        /// <summary>
        /// Get an author by her/his id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to get</param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (Author)</returns>
        System.Threading.Tasks.Task<ApiResponse<Author>> ApiVversionAuthorsAuthorIdGetAsyncWithHttpInfo (Guid? authorId, string version);
        /// <summary>
        /// Partially update and author
        /// </summary>
        /// <remarks>
        /// Sample request (this request update the author&#x27;s **first name**)   &#x60;&#x60;&#x60;json  PATCH /authors/id  [       {           \&quot;op\&quot;: \&quot;replace\&quot;,           \&quot;path\&quot;: \&quot;/firstname\&quot;,           \&quot;value\&quot;: \&quot;new first name\&quot;       }   ]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to update</param>
        /// <param name="version"></param>
        /// <param name="body">The set of operations to apply to author (optional)</param>
        /// <returns>Task of Author</returns>
        System.Threading.Tasks.Task<Author> ApiVversionAuthorsAuthorIdPatchAsync (Guid? authorId, string version, List<Operation> body = null);

        /// <summary>
        /// Partially update and author
        /// </summary>
        /// <remarks>
        /// Sample request (this request update the author&#x27;s **first name**)   &#x60;&#x60;&#x60;json  PATCH /authors/id  [       {           \&quot;op\&quot;: \&quot;replace\&quot;,           \&quot;path\&quot;: \&quot;/firstname\&quot;,           \&quot;value\&quot;: \&quot;new first name\&quot;       }   ]
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to update</param>
        /// <param name="version"></param>
        /// <param name="body">The set of operations to apply to author (optional)</param>
        /// <returns>Task of ApiResponse (Author)</returns>
        System.Threading.Tasks.Task<ApiResponse<Author>> ApiVversionAuthorsAuthorIdPatchAsyncWithHttpInfo (Guid? authorId, string version, List<Operation> body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId"></param>
        /// <param name="version"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Author</returns>
        System.Threading.Tasks.Task<Author> ApiVversionAuthorsAuthorIdPutAsync (Guid? authorId, string version, AuthorForUpdate body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId"></param>
        /// <param name="version"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Author)</returns>
        System.Threading.Tasks.Task<ApiResponse<Author>> ApiVversionAuthorsAuthorIdPutAsyncWithHttpInfo (Guid? authorId, string version, AuthorForUpdate body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;Author&gt;</returns>
        System.Threading.Tasks.Task<List<Author>> ApiVversionAuthorsGetAsync (string version);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;Author&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Author>>> ApiVversionAuthorsGetAsyncWithHttpInfo (string version);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AuthorsApi : IAuthorsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuthorsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthorsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get an author by her/his id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to get</param>
        /// <param name="version"></param>
        /// <returns>Author</returns>
        public Author ApiVversionAuthorsAuthorIdGet (Guid? authorId, string version)
        {
             ApiResponse<Author> localVarResponse = ApiVversionAuthorsAuthorIdGetWithHttpInfo(authorId, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an author by her/his id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to get</param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Author</returns>
        public ApiResponse< Author > ApiVversionAuthorsAuthorIdGetWithHttpInfo (Guid? authorId, string version)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling AuthorsApi->ApiVversionAuthorsAuthorIdGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AuthorsApi->ApiVversionAuthorsAuthorIdGet");

            var localVarPath = "/api/v{version}/authors/{authorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVversionAuthorsAuthorIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Author>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Author) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Author)));
        }

        /// <summary>
        /// Get an author by her/his id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to get</param>
        /// <param name="version"></param>
        /// <returns>Task of Author</returns>
        public async System.Threading.Tasks.Task<Author> ApiVversionAuthorsAuthorIdGetAsync (Guid? authorId, string version)
        {
             ApiResponse<Author> localVarResponse = await ApiVversionAuthorsAuthorIdGetAsyncWithHttpInfo(authorId, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an author by her/his id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to get</param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (Author)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Author>> ApiVversionAuthorsAuthorIdGetAsyncWithHttpInfo (Guid? authorId, string version)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling AuthorsApi->ApiVversionAuthorsAuthorIdGet");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AuthorsApi->ApiVversionAuthorsAuthorIdGet");

            var localVarPath = "/api/v{version}/authors/{authorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVversionAuthorsAuthorIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Author>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Author) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Author)));
        }

        /// <summary>
        /// Partially update and author Sample request (this request update the author&#x27;s **first name**)   &#x60;&#x60;&#x60;json  PATCH /authors/id  [       {           \&quot;op\&quot;: \&quot;replace\&quot;,           \&quot;path\&quot;: \&quot;/firstname\&quot;,           \&quot;value\&quot;: \&quot;new first name\&quot;       }   ]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to update</param>
        /// <param name="version"></param>
        /// <param name="body">The set of operations to apply to author (optional)</param>
        /// <returns>Author</returns>
        public Author ApiVversionAuthorsAuthorIdPatch (Guid? authorId, string version, List<Operation> body = null)
        {
             ApiResponse<Author> localVarResponse = ApiVversionAuthorsAuthorIdPatchWithHttpInfo(authorId, version, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partially update and author Sample request (this request update the author&#x27;s **first name**)   &#x60;&#x60;&#x60;json  PATCH /authors/id  [       {           \&quot;op\&quot;: \&quot;replace\&quot;,           \&quot;path\&quot;: \&quot;/firstname\&quot;,           \&quot;value\&quot;: \&quot;new first name\&quot;       }   ]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to update</param>
        /// <param name="version"></param>
        /// <param name="body">The set of operations to apply to author (optional)</param>
        /// <returns>ApiResponse of Author</returns>
        public ApiResponse< Author > ApiVversionAuthorsAuthorIdPatchWithHttpInfo (Guid? authorId, string version, List<Operation> body = null)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling AuthorsApi->ApiVversionAuthorsAuthorIdPatch");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AuthorsApi->ApiVversionAuthorsAuthorIdPatch");

            var localVarPath = "/api/v{version}/authors/{authorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVversionAuthorsAuthorIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Author>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Author) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Author)));
        }

        /// <summary>
        /// Partially update and author Sample request (this request update the author&#x27;s **first name**)   &#x60;&#x60;&#x60;json  PATCH /authors/id  [       {           \&quot;op\&quot;: \&quot;replace\&quot;,           \&quot;path\&quot;: \&quot;/firstname\&quot;,           \&quot;value\&quot;: \&quot;new first name\&quot;       }   ]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to update</param>
        /// <param name="version"></param>
        /// <param name="body">The set of operations to apply to author (optional)</param>
        /// <returns>Task of Author</returns>
        public async System.Threading.Tasks.Task<Author> ApiVversionAuthorsAuthorIdPatchAsync (Guid? authorId, string version, List<Operation> body = null)
        {
             ApiResponse<Author> localVarResponse = await ApiVversionAuthorsAuthorIdPatchAsyncWithHttpInfo(authorId, version, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partially update and author Sample request (this request update the author&#x27;s **first name**)   &#x60;&#x60;&#x60;json  PATCH /authors/id  [       {           \&quot;op\&quot;: \&quot;replace\&quot;,           \&quot;path\&quot;: \&quot;/firstname\&quot;,           \&quot;value\&quot;: \&quot;new first name\&quot;       }   ]
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId">The id of the author you want to update</param>
        /// <param name="version"></param>
        /// <param name="body">The set of operations to apply to author (optional)</param>
        /// <returns>Task of ApiResponse (Author)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Author>> ApiVversionAuthorsAuthorIdPatchAsyncWithHttpInfo (Guid? authorId, string version, List<Operation> body = null)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling AuthorsApi->ApiVversionAuthorsAuthorIdPatch");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AuthorsApi->ApiVversionAuthorsAuthorIdPatch");

            var localVarPath = "/api/v{version}/authors/{authorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVversionAuthorsAuthorIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Author>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Author) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Author)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId"></param>
        /// <param name="version"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Author</returns>
        public Author ApiVversionAuthorsAuthorIdPut (Guid? authorId, string version, AuthorForUpdate body = null)
        {
             ApiResponse<Author> localVarResponse = ApiVversionAuthorsAuthorIdPutWithHttpInfo(authorId, version, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId"></param>
        /// <param name="version"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Author</returns>
        public ApiResponse< Author > ApiVversionAuthorsAuthorIdPutWithHttpInfo (Guid? authorId, string version, AuthorForUpdate body = null)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling AuthorsApi->ApiVversionAuthorsAuthorIdPut");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AuthorsApi->ApiVversionAuthorsAuthorIdPut");

            var localVarPath = "/api/v{version}/authors/{authorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVversionAuthorsAuthorIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Author>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Author) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Author)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId"></param>
        /// <param name="version"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Author</returns>
        public async System.Threading.Tasks.Task<Author> ApiVversionAuthorsAuthorIdPutAsync (Guid? authorId, string version, AuthorForUpdate body = null)
        {
             ApiResponse<Author> localVarResponse = await ApiVversionAuthorsAuthorIdPutAsyncWithHttpInfo(authorId, version, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorId"></param>
        /// <param name="version"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Author)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Author>> ApiVversionAuthorsAuthorIdPutAsyncWithHttpInfo (Guid? authorId, string version, AuthorForUpdate body = null)
        {
            // verify the required parameter 'authorId' is set
            if (authorId == null)
                throw new ApiException(400, "Missing required parameter 'authorId' when calling AuthorsApi->ApiVversionAuthorsAuthorIdPut");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AuthorsApi->ApiVversionAuthorsAuthorIdPut");

            var localVarPath = "/api/v{version}/authors/{authorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarPathParams.Add("authorId", this.Configuration.ApiClient.ParameterToString(authorId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVversionAuthorsAuthorIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Author>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Author) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Author)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>List&lt;Author&gt;</returns>
        public List<Author> ApiVversionAuthorsGet (string version)
        {
             ApiResponse<List<Author>> localVarResponse = ApiVversionAuthorsGetWithHttpInfo(version);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;Author&gt;</returns>
        public ApiResponse< List<Author> > ApiVversionAuthorsGetWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AuthorsApi->ApiVversionAuthorsGet");

            var localVarPath = "/api/v{version}/authors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVversionAuthorsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Author>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Author>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Author>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;Author&gt;</returns>
        public async System.Threading.Tasks.Task<List<Author>> ApiVversionAuthorsGetAsync (string version)
        {
             ApiResponse<List<Author>> localVarResponse = await ApiVversionAuthorsGetAsyncWithHttpInfo(version);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;Author&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Author>>> ApiVversionAuthorsGetAsyncWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AuthorsApi->ApiVversionAuthorsGet");

            var localVarPath = "/api/v{version}/authors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVversionAuthorsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Author>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Author>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Author>)));
        }

    }
}
