/* 
 * Library API
 *
 * Through this API you can access authors and their books
 *
 * OpenAPI spec version: 1.0
 * Contact: bailleul.sacha@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ModelStateEntry
    /// </summary>
    [DataContract]
        public partial class ModelStateEntry :  IEquatable<ModelStateEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelStateEntry" /> class.
        /// </summary>
        /// <param name="rawValue">rawValue.</param>
        /// <param name="attemptedValue">attemptedValue.</param>
        /// <param name="validationState">validationState.</param>
        public ModelStateEntry(Object rawValue = default(Object), string attemptedValue = default(string),  validationState = default())
        {
            this.RawValue = rawValue;
            this.AttemptedValue = attemptedValue;
            this.ValidationState = validationState;
        }
        
        /// <summary>
        /// Gets or Sets RawValue
        /// </summary>
        [DataMember(Name="rawValue", EmitDefaultValue=false)]
        public Object RawValue { get; set; }

        /// <summary>
        /// Gets or Sets AttemptedValue
        /// </summary>
        [DataMember(Name="attemptedValue", EmitDefaultValue=false)]
        public string AttemptedValue { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<ModelError> Errors { get; private set; }

        /// <summary>
        /// Gets or Sets ValidationState
        /// </summary>
        [DataMember(Name="validationState", EmitDefaultValue=false)]
        public  ValidationState { get; set; }

        /// <summary>
        /// Gets or Sets IsContainerNode
        /// </summary>
        [DataMember(Name="isContainerNode", EmitDefaultValue=false)]
        public bool? IsContainerNode { get; private set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<ModelStateEntry> Children { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelStateEntry {\n");
            sb.Append("  RawValue: ").Append(RawValue).Append("\n");
            sb.Append("  AttemptedValue: ").Append(AttemptedValue).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  ValidationState: ").Append(ValidationState).Append("\n");
            sb.Append("  IsContainerNode: ").Append(IsContainerNode).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelStateEntry);
        }

        /// <summary>
        /// Returns true if ModelStateEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelStateEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelStateEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RawValue == input.RawValue ||
                    (this.RawValue != null &&
                    this.RawValue.Equals(input.RawValue))
                ) && 
                (
                    this.AttemptedValue == input.AttemptedValue ||
                    (this.AttemptedValue != null &&
                    this.AttemptedValue.Equals(input.AttemptedValue))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.ValidationState == input.ValidationState ||
                    this.ValidationState != null &&
                    input.ValidationState != null &&
                    this.ValidationState.SequenceEqual(input.ValidationState)
                ) && 
                (
                    this.IsContainerNode == input.IsContainerNode ||
                    (this.IsContainerNode != null &&
                    this.IsContainerNode.Equals(input.IsContainerNode))
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RawValue != null)
                    hashCode = hashCode * 59 + this.RawValue.GetHashCode();
                if (this.AttemptedValue != null)
                    hashCode = hashCode * 59 + this.AttemptedValue.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.ValidationState != null)
                    hashCode = hashCode * 59 + this.ValidationState.GetHashCode();
                if (this.IsContainerNode != null)
                    hashCode = hashCode * 59 + this.IsContainerNode.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
