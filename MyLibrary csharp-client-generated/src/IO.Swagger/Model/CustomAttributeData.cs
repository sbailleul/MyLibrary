/* 
 * Library API
 *
 * Through this API you can access authors and their books
 *
 * OpenAPI spec version: 1.0
 * Contact: bailleul.sacha@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomAttributeData
    /// </summary>
    [DataContract]
        public partial class CustomAttributeData :  IEquatable<CustomAttributeData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAttributeData" /> class.
        /// </summary>
        public CustomAttributeData()
        {
        }
        
        /// <summary>
        /// Gets or Sets AttributeType
        /// </summary>
        [DataMember(Name="attributeType", EmitDefaultValue=false)]
        public  AttributeType { get; private set; }

        /// <summary>
        /// Gets or Sets Constructor
        /// </summary>
        [DataMember(Name="constructor", EmitDefaultValue=false)]
        public  Constructor { get; private set; }

        /// <summary>
        /// Gets or Sets ConstructorArguments
        /// </summary>
        [DataMember(Name="constructorArguments", EmitDefaultValue=false)]
        public List<CustomAttributeTypedArgument> ConstructorArguments { get; private set; }

        /// <summary>
        /// Gets or Sets NamedArguments
        /// </summary>
        [DataMember(Name="namedArguments", EmitDefaultValue=false)]
        public List<CustomAttributeNamedArgument> NamedArguments { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomAttributeData {\n");
            sb.Append("  AttributeType: ").Append(AttributeType).Append("\n");
            sb.Append("  Constructor: ").Append(Constructor).Append("\n");
            sb.Append("  ConstructorArguments: ").Append(ConstructorArguments).Append("\n");
            sb.Append("  NamedArguments: ").Append(NamedArguments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomAttributeData);
        }

        /// <summary>
        /// Returns true if CustomAttributeData instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomAttributeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomAttributeData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttributeType == input.AttributeType ||
                    this.AttributeType != null &&
                    input.AttributeType != null &&
                    this.AttributeType.SequenceEqual(input.AttributeType)
                ) && 
                (
                    this.Constructor == input.Constructor ||
                    this.Constructor != null &&
                    input.Constructor != null &&
                    this.Constructor.SequenceEqual(input.Constructor)
                ) && 
                (
                    this.ConstructorArguments == input.ConstructorArguments ||
                    this.ConstructorArguments != null &&
                    input.ConstructorArguments != null &&
                    this.ConstructorArguments.SequenceEqual(input.ConstructorArguments)
                ) && 
                (
                    this.NamedArguments == input.NamedArguments ||
                    this.NamedArguments != null &&
                    input.NamedArguments != null &&
                    this.NamedArguments.SequenceEqual(input.NamedArguments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttributeType != null)
                    hashCode = hashCode * 59 + this.AttributeType.GetHashCode();
                if (this.Constructor != null)
                    hashCode = hashCode * 59 + this.Constructor.GetHashCode();
                if (this.ConstructorArguments != null)
                    hashCode = hashCode * 59 + this.ConstructorArguments.GetHashCode();
                if (this.NamedArguments != null)
                    hashCode = hashCode * 59 + this.NamedArguments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
