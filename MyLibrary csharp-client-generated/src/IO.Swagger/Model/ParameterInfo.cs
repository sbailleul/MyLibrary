/* 
 * Library API
 *
 * Through this API you can access authors and their books
 *
 * OpenAPI spec version: 1.0
 * Contact: bailleul.sacha@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ParameterInfo
    /// </summary>
    [DataContract]
        public partial class ParameterInfo :  IEquatable<ParameterInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterInfo" /> class.
        /// </summary>
        public ParameterInfo()
        {
        }
        
        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public  Attributes { get; private set; }

        /// <summary>
        /// Gets or Sets Member
        /// </summary>
        [DataMember(Name="member", EmitDefaultValue=false)]
        public  Member { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets ParameterType
        /// </summary>
        [DataMember(Name="parameterType", EmitDefaultValue=false)]
        public  ParameterType { get; private set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; private set; }

        /// <summary>
        /// Gets or Sets IsIn
        /// </summary>
        [DataMember(Name="isIn", EmitDefaultValue=false)]
        public bool? IsIn { get; private set; }

        /// <summary>
        /// Gets or Sets IsLcid
        /// </summary>
        [DataMember(Name="isLcid", EmitDefaultValue=false)]
        public bool? IsLcid { get; private set; }

        /// <summary>
        /// Gets or Sets IsOptional
        /// </summary>
        [DataMember(Name="isOptional", EmitDefaultValue=false)]
        public bool? IsOptional { get; private set; }

        /// <summary>
        /// Gets or Sets IsOut
        /// </summary>
        [DataMember(Name="isOut", EmitDefaultValue=false)]
        public bool? IsOut { get; private set; }

        /// <summary>
        /// Gets or Sets IsRetval
        /// </summary>
        [DataMember(Name="isRetval", EmitDefaultValue=false)]
        public bool? IsRetval { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public Object DefaultValue { get; private set; }

        /// <summary>
        /// Gets or Sets RawDefaultValue
        /// </summary>
        [DataMember(Name="rawDefaultValue", EmitDefaultValue=false)]
        public Object RawDefaultValue { get; private set; }

        /// <summary>
        /// Gets or Sets HasDefaultValue
        /// </summary>
        [DataMember(Name="hasDefaultValue", EmitDefaultValue=false)]
        public bool? HasDefaultValue { get; private set; }

        /// <summary>
        /// Gets or Sets CustomAttributes
        /// </summary>
        [DataMember(Name="customAttributes", EmitDefaultValue=false)]
        public List<CustomAttributeData> CustomAttributes { get; private set; }

        /// <summary>
        /// Gets or Sets MetadataToken
        /// </summary>
        [DataMember(Name="metadataToken", EmitDefaultValue=false)]
        public int? MetadataToken { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParameterInfo {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Member: ").Append(Member).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParameterType: ").Append(ParameterType).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  IsIn: ").Append(IsIn).Append("\n");
            sb.Append("  IsLcid: ").Append(IsLcid).Append("\n");
            sb.Append("  IsOptional: ").Append(IsOptional).Append("\n");
            sb.Append("  IsOut: ").Append(IsOut).Append("\n");
            sb.Append("  IsRetval: ").Append(IsRetval).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  RawDefaultValue: ").Append(RawDefaultValue).Append("\n");
            sb.Append("  HasDefaultValue: ").Append(HasDefaultValue).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  MetadataToken: ").Append(MetadataToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParameterInfo);
        }

        /// <summary>
        /// Returns true if ParameterInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ParameterInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParameterInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Member == input.Member ||
                    this.Member != null &&
                    input.Member != null &&
                    this.Member.SequenceEqual(input.Member)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParameterType == input.ParameterType ||
                    this.ParameterType != null &&
                    input.ParameterType != null &&
                    this.ParameterType.SequenceEqual(input.ParameterType)
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.IsIn == input.IsIn ||
                    (this.IsIn != null &&
                    this.IsIn.Equals(input.IsIn))
                ) && 
                (
                    this.IsLcid == input.IsLcid ||
                    (this.IsLcid != null &&
                    this.IsLcid.Equals(input.IsLcid))
                ) && 
                (
                    this.IsOptional == input.IsOptional ||
                    (this.IsOptional != null &&
                    this.IsOptional.Equals(input.IsOptional))
                ) && 
                (
                    this.IsOut == input.IsOut ||
                    (this.IsOut != null &&
                    this.IsOut.Equals(input.IsOut))
                ) && 
                (
                    this.IsRetval == input.IsRetval ||
                    (this.IsRetval != null &&
                    this.IsRetval.Equals(input.IsRetval))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.RawDefaultValue == input.RawDefaultValue ||
                    (this.RawDefaultValue != null &&
                    this.RawDefaultValue.Equals(input.RawDefaultValue))
                ) && 
                (
                    this.HasDefaultValue == input.HasDefaultValue ||
                    (this.HasDefaultValue != null &&
                    this.HasDefaultValue.Equals(input.HasDefaultValue))
                ) && 
                (
                    this.CustomAttributes == input.CustomAttributes ||
                    this.CustomAttributes != null &&
                    input.CustomAttributes != null &&
                    this.CustomAttributes.SequenceEqual(input.CustomAttributes)
                ) && 
                (
                    this.MetadataToken == input.MetadataToken ||
                    (this.MetadataToken != null &&
                    this.MetadataToken.Equals(input.MetadataToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Member != null)
                    hashCode = hashCode * 59 + this.Member.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParameterType != null)
                    hashCode = hashCode * 59 + this.ParameterType.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.IsIn != null)
                    hashCode = hashCode * 59 + this.IsIn.GetHashCode();
                if (this.IsLcid != null)
                    hashCode = hashCode * 59 + this.IsLcid.GetHashCode();
                if (this.IsOptional != null)
                    hashCode = hashCode * 59 + this.IsOptional.GetHashCode();
                if (this.IsOut != null)
                    hashCode = hashCode * 59 + this.IsOut.GetHashCode();
                if (this.IsRetval != null)
                    hashCode = hashCode * 59 + this.IsRetval.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.RawDefaultValue != null)
                    hashCode = hashCode * 59 + this.RawDefaultValue.GetHashCode();
                if (this.HasDefaultValue != null)
                    hashCode = hashCode * 59 + this.HasDefaultValue.GetHashCode();
                if (this.CustomAttributes != null)
                    hashCode = hashCode * 59 + this.CustomAttributes.GetHashCode();
                if (this.MetadataToken != null)
                    hashCode = hashCode * 59 + this.MetadataToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
