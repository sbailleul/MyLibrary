/* 
 * Library API
 *
 * Through this API you can access authors and their books
 *
 * OpenAPI spec version: 1.0
 * Contact: bailleul.sacha@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Module
    /// </summary>
    [DataContract]
        public partial class Module :  IEquatable<Module>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Module" /> class.
        /// </summary>
        public Module()
        {
        }
        
        /// <summary>
        /// Gets or Sets Assembly
        /// </summary>
        [DataMember(Name="assembly", EmitDefaultValue=false)]
        public  Assembly { get; private set; }

        /// <summary>
        /// Gets or Sets FullyQualifiedName
        /// </summary>
        [DataMember(Name="fullyQualifiedName", EmitDefaultValue=false)]
        public string FullyQualifiedName { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets MdStreamVersion
        /// </summary>
        [DataMember(Name="mdStreamVersion", EmitDefaultValue=false)]
        public int? MdStreamVersion { get; private set; }

        /// <summary>
        /// Gets or Sets ModuleVersionId
        /// </summary>
        [DataMember(Name="moduleVersionId", EmitDefaultValue=false)]
        public Guid? ModuleVersionId { get; private set; }

        /// <summary>
        /// Gets or Sets ScopeName
        /// </summary>
        [DataMember(Name="scopeName", EmitDefaultValue=false)]
        public string ScopeName { get; private set; }

        /// <summary>
        /// Gets or Sets ModuleHandle
        /// </summary>
        [DataMember(Name="moduleHandle", EmitDefaultValue=false)]
        public  ModuleHandle { get; private set; }

        /// <summary>
        /// Gets or Sets CustomAttributes
        /// </summary>
        [DataMember(Name="customAttributes", EmitDefaultValue=false)]
        public List<CustomAttributeData> CustomAttributes { get; private set; }

        /// <summary>
        /// Gets or Sets MetadataToken
        /// </summary>
        [DataMember(Name="metadataToken", EmitDefaultValue=false)]
        public int? MetadataToken { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Module {\n");
            sb.Append("  Assembly: ").Append(Assembly).Append("\n");
            sb.Append("  FullyQualifiedName: ").Append(FullyQualifiedName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MdStreamVersion: ").Append(MdStreamVersion).Append("\n");
            sb.Append("  ModuleVersionId: ").Append(ModuleVersionId).Append("\n");
            sb.Append("  ScopeName: ").Append(ScopeName).Append("\n");
            sb.Append("  ModuleHandle: ").Append(ModuleHandle).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  MetadataToken: ").Append(MetadataToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Module);
        }

        /// <summary>
        /// Returns true if Module instances are equal
        /// </summary>
        /// <param name="input">Instance of Module to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Module input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Assembly == input.Assembly ||
                    this.Assembly != null &&
                    input.Assembly != null &&
                    this.Assembly.SequenceEqual(input.Assembly)
                ) && 
                (
                    this.FullyQualifiedName == input.FullyQualifiedName ||
                    (this.FullyQualifiedName != null &&
                    this.FullyQualifiedName.Equals(input.FullyQualifiedName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MdStreamVersion == input.MdStreamVersion ||
                    (this.MdStreamVersion != null &&
                    this.MdStreamVersion.Equals(input.MdStreamVersion))
                ) && 
                (
                    this.ModuleVersionId == input.ModuleVersionId ||
                    (this.ModuleVersionId != null &&
                    this.ModuleVersionId.Equals(input.ModuleVersionId))
                ) && 
                (
                    this.ScopeName == input.ScopeName ||
                    (this.ScopeName != null &&
                    this.ScopeName.Equals(input.ScopeName))
                ) && 
                (
                    this.ModuleHandle == input.ModuleHandle ||
                    this.ModuleHandle != null &&
                    input.ModuleHandle != null &&
                    this.ModuleHandle.SequenceEqual(input.ModuleHandle)
                ) && 
                (
                    this.CustomAttributes == input.CustomAttributes ||
                    this.CustomAttributes != null &&
                    input.CustomAttributes != null &&
                    this.CustomAttributes.SequenceEqual(input.CustomAttributes)
                ) && 
                (
                    this.MetadataToken == input.MetadataToken ||
                    (this.MetadataToken != null &&
                    this.MetadataToken.Equals(input.MetadataToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assembly != null)
                    hashCode = hashCode * 59 + this.Assembly.GetHashCode();
                if (this.FullyQualifiedName != null)
                    hashCode = hashCode * 59 + this.FullyQualifiedName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MdStreamVersion != null)
                    hashCode = hashCode * 59 + this.MdStreamVersion.GetHashCode();
                if (this.ModuleVersionId != null)
                    hashCode = hashCode * 59 + this.ModuleVersionId.GetHashCode();
                if (this.ScopeName != null)
                    hashCode = hashCode * 59 + this.ScopeName.GetHashCode();
                if (this.ModuleHandle != null)
                    hashCode = hashCode * 59 + this.ModuleHandle.GetHashCode();
                if (this.CustomAttributes != null)
                    hashCode = hashCode * 59 + this.CustomAttributes.GetHashCode();
                if (this.MetadataToken != null)
                    hashCode = hashCode * 59 + this.MetadataToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
