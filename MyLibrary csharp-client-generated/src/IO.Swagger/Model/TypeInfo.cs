/* 
 * Library API
 *
 * Through this API you can access authors and their books
 *
 * OpenAPI spec version: 1.0
 * Contact: bailleul.sacha@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TypeInfo
    /// </summary>
    [DataContract]
        public partial class TypeInfo :  IEquatable<TypeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TypeInfo" /> class.
        /// </summary>
        public TypeInfo()
        {
        }
        
        /// <summary>
        /// Gets or Sets GenericTypeParameters
        /// </summary>
        [DataMember(Name="genericTypeParameters", EmitDefaultValue=false)]
        public List<Type> GenericTypeParameters { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaredConstructors
        /// </summary>
        [DataMember(Name="declaredConstructors", EmitDefaultValue=false)]
        public List<ConstructorInfo> DeclaredConstructors { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaredEvents
        /// </summary>
        [DataMember(Name="declaredEvents", EmitDefaultValue=false)]
        public List<EventInfo> DeclaredEvents { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaredFields
        /// </summary>
        [DataMember(Name="declaredFields", EmitDefaultValue=false)]
        public List<FieldInfo> DeclaredFields { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaredMembers
        /// </summary>
        [DataMember(Name="declaredMembers", EmitDefaultValue=false)]
        public List<MemberInfo> DeclaredMembers { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaredMethods
        /// </summary>
        [DataMember(Name="declaredMethods", EmitDefaultValue=false)]
        public List<MethodInfo> DeclaredMethods { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaredNestedTypes
        /// </summary>
        [DataMember(Name="declaredNestedTypes", EmitDefaultValue=false)]
        public List<TypeInfo> DeclaredNestedTypes { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaredProperties
        /// </summary>
        [DataMember(Name="declaredProperties", EmitDefaultValue=false)]
        public List<PropertyInfo> DeclaredProperties { get; private set; }

        /// <summary>
        /// Gets or Sets ImplementedInterfaces
        /// </summary>
        [DataMember(Name="implementedInterfaces", EmitDefaultValue=false)]
        public List<Type> ImplementedInterfaces { get; private set; }

        /// <summary>
        /// Gets or Sets IsInterface
        /// </summary>
        [DataMember(Name="isInterface", EmitDefaultValue=false)]
        public bool? IsInterface { get; private set; }

        /// <summary>
        /// Gets or Sets MemberType
        /// </summary>
        [DataMember(Name="memberType", EmitDefaultValue=false)]
        public  MemberType { get; private set; }

        /// <summary>
        /// Gets or Sets Namespace
        /// </summary>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; private set; }

        /// <summary>
        /// Gets or Sets AssemblyQualifiedName
        /// </summary>
        [DataMember(Name="assemblyQualifiedName", EmitDefaultValue=false)]
        public string AssemblyQualifiedName { get; private set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; private set; }

        /// <summary>
        /// Gets or Sets Assembly
        /// </summary>
        [DataMember(Name="assembly", EmitDefaultValue=false)]
        public  Assembly { get; private set; }

        /// <summary>
        /// Gets or Sets Module
        /// </summary>
        [DataMember(Name="module", EmitDefaultValue=false)]
        public  Module { get; private set; }

        /// <summary>
        /// Gets or Sets IsNested
        /// </summary>
        [DataMember(Name="isNested", EmitDefaultValue=false)]
        public bool? IsNested { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaringType
        /// </summary>
        [DataMember(Name="declaringType", EmitDefaultValue=false)]
        public  DeclaringType { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaringMethod
        /// </summary>
        [DataMember(Name="declaringMethod", EmitDefaultValue=false)]
        public  DeclaringMethod { get; private set; }

        /// <summary>
        /// Gets or Sets ReflectedType
        /// </summary>
        [DataMember(Name="reflectedType", EmitDefaultValue=false)]
        public  ReflectedType { get; private set; }

        /// <summary>
        /// Gets or Sets UnderlyingSystemType
        /// </summary>
        [DataMember(Name="underlyingSystemType", EmitDefaultValue=false)]
        public  UnderlyingSystemType { get; private set; }

        /// <summary>
        /// Gets or Sets IsTypeDefinition
        /// </summary>
        [DataMember(Name="isTypeDefinition", EmitDefaultValue=false)]
        public bool? IsTypeDefinition { get; private set; }

        /// <summary>
        /// Gets or Sets IsArray
        /// </summary>
        [DataMember(Name="isArray", EmitDefaultValue=false)]
        public bool? IsArray { get; private set; }

        /// <summary>
        /// Gets or Sets IsByRef
        /// </summary>
        [DataMember(Name="isByRef", EmitDefaultValue=false)]
        public bool? IsByRef { get; private set; }

        /// <summary>
        /// Gets or Sets IsPointer
        /// </summary>
        [DataMember(Name="isPointer", EmitDefaultValue=false)]
        public bool? IsPointer { get; private set; }

        /// <summary>
        /// Gets or Sets IsConstructedGenericType
        /// </summary>
        [DataMember(Name="isConstructedGenericType", EmitDefaultValue=false)]
        public bool? IsConstructedGenericType { get; private set; }

        /// <summary>
        /// Gets or Sets IsGenericParameter
        /// </summary>
        [DataMember(Name="isGenericParameter", EmitDefaultValue=false)]
        public bool? IsGenericParameter { get; private set; }

        /// <summary>
        /// Gets or Sets IsGenericTypeParameter
        /// </summary>
        [DataMember(Name="isGenericTypeParameter", EmitDefaultValue=false)]
        public bool? IsGenericTypeParameter { get; private set; }

        /// <summary>
        /// Gets or Sets IsGenericMethodParameter
        /// </summary>
        [DataMember(Name="isGenericMethodParameter", EmitDefaultValue=false)]
        public bool? IsGenericMethodParameter { get; private set; }

        /// <summary>
        /// Gets or Sets IsGenericType
        /// </summary>
        [DataMember(Name="isGenericType", EmitDefaultValue=false)]
        public bool? IsGenericType { get; private set; }

        /// <summary>
        /// Gets or Sets IsGenericTypeDefinition
        /// </summary>
        [DataMember(Name="isGenericTypeDefinition", EmitDefaultValue=false)]
        public bool? IsGenericTypeDefinition { get; private set; }

        /// <summary>
        /// Gets or Sets IsSZArray
        /// </summary>
        [DataMember(Name="isSZArray", EmitDefaultValue=false)]
        public bool? IsSZArray { get; private set; }

        /// <summary>
        /// Gets or Sets IsVariableBoundArray
        /// </summary>
        [DataMember(Name="isVariableBoundArray", EmitDefaultValue=false)]
        public bool? IsVariableBoundArray { get; private set; }

        /// <summary>
        /// Gets or Sets IsByRefLike
        /// </summary>
        [DataMember(Name="isByRefLike", EmitDefaultValue=false)]
        public bool? IsByRefLike { get; private set; }

        /// <summary>
        /// Gets or Sets HasElementType
        /// </summary>
        [DataMember(Name="hasElementType", EmitDefaultValue=false)]
        public bool? HasElementType { get; private set; }

        /// <summary>
        /// Gets or Sets GenericTypeArguments
        /// </summary>
        [DataMember(Name="genericTypeArguments", EmitDefaultValue=false)]
        public List<Type> GenericTypeArguments { get; private set; }

        /// <summary>
        /// Gets or Sets GenericParameterPosition
        /// </summary>
        [DataMember(Name="genericParameterPosition", EmitDefaultValue=false)]
        public int? GenericParameterPosition { get; private set; }

        /// <summary>
        /// Gets or Sets GenericParameterAttributes
        /// </summary>
        [DataMember(Name="genericParameterAttributes", EmitDefaultValue=false)]
        public  GenericParameterAttributes { get; private set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public  Attributes { get; private set; }

        /// <summary>
        /// Gets or Sets IsAbstract
        /// </summary>
        [DataMember(Name="isAbstract", EmitDefaultValue=false)]
        public bool? IsAbstract { get; private set; }

        /// <summary>
        /// Gets or Sets IsImport
        /// </summary>
        [DataMember(Name="isImport", EmitDefaultValue=false)]
        public bool? IsImport { get; private set; }

        /// <summary>
        /// Gets or Sets IsSealed
        /// </summary>
        [DataMember(Name="isSealed", EmitDefaultValue=false)]
        public bool? IsSealed { get; private set; }

        /// <summary>
        /// Gets or Sets IsSpecialName
        /// </summary>
        [DataMember(Name="isSpecialName", EmitDefaultValue=false)]
        public bool? IsSpecialName { get; private set; }

        /// <summary>
        /// Gets or Sets IsClass
        /// </summary>
        [DataMember(Name="isClass", EmitDefaultValue=false)]
        public bool? IsClass { get; private set; }

        /// <summary>
        /// Gets or Sets IsNestedAssembly
        /// </summary>
        [DataMember(Name="isNestedAssembly", EmitDefaultValue=false)]
        public bool? IsNestedAssembly { get; private set; }

        /// <summary>
        /// Gets or Sets IsNestedFamANDAssem
        /// </summary>
        [DataMember(Name="isNestedFamANDAssem", EmitDefaultValue=false)]
        public bool? IsNestedFamANDAssem { get; private set; }

        /// <summary>
        /// Gets or Sets IsNestedFamily
        /// </summary>
        [DataMember(Name="isNestedFamily", EmitDefaultValue=false)]
        public bool? IsNestedFamily { get; private set; }

        /// <summary>
        /// Gets or Sets IsNestedFamORAssem
        /// </summary>
        [DataMember(Name="isNestedFamORAssem", EmitDefaultValue=false)]
        public bool? IsNestedFamORAssem { get; private set; }

        /// <summary>
        /// Gets or Sets IsNestedPrivate
        /// </summary>
        [DataMember(Name="isNestedPrivate", EmitDefaultValue=false)]
        public bool? IsNestedPrivate { get; private set; }

        /// <summary>
        /// Gets or Sets IsNestedPublic
        /// </summary>
        [DataMember(Name="isNestedPublic", EmitDefaultValue=false)]
        public bool? IsNestedPublic { get; private set; }

        /// <summary>
        /// Gets or Sets IsNotPublic
        /// </summary>
        [DataMember(Name="isNotPublic", EmitDefaultValue=false)]
        public bool? IsNotPublic { get; private set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="isPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; private set; }

        /// <summary>
        /// Gets or Sets IsAutoLayout
        /// </summary>
        [DataMember(Name="isAutoLayout", EmitDefaultValue=false)]
        public bool? IsAutoLayout { get; private set; }

        /// <summary>
        /// Gets or Sets IsExplicitLayout
        /// </summary>
        [DataMember(Name="isExplicitLayout", EmitDefaultValue=false)]
        public bool? IsExplicitLayout { get; private set; }

        /// <summary>
        /// Gets or Sets IsLayoutSequential
        /// </summary>
        [DataMember(Name="isLayoutSequential", EmitDefaultValue=false)]
        public bool? IsLayoutSequential { get; private set; }

        /// <summary>
        /// Gets or Sets IsAnsiClass
        /// </summary>
        [DataMember(Name="isAnsiClass", EmitDefaultValue=false)]
        public bool? IsAnsiClass { get; private set; }

        /// <summary>
        /// Gets or Sets IsAutoClass
        /// </summary>
        [DataMember(Name="isAutoClass", EmitDefaultValue=false)]
        public bool? IsAutoClass { get; private set; }

        /// <summary>
        /// Gets or Sets IsUnicodeClass
        /// </summary>
        [DataMember(Name="isUnicodeClass", EmitDefaultValue=false)]
        public bool? IsUnicodeClass { get; private set; }

        /// <summary>
        /// Gets or Sets IsCOMObject
        /// </summary>
        [DataMember(Name="isCOMObject", EmitDefaultValue=false)]
        public bool? IsCOMObject { get; private set; }

        /// <summary>
        /// Gets or Sets IsContextful
        /// </summary>
        [DataMember(Name="isContextful", EmitDefaultValue=false)]
        public bool? IsContextful { get; private set; }

        /// <summary>
        /// Gets or Sets IsEnum
        /// </summary>
        [DataMember(Name="isEnum", EmitDefaultValue=false)]
        public bool? IsEnum { get; private set; }

        /// <summary>
        /// Gets or Sets IsMarshalByRef
        /// </summary>
        [DataMember(Name="isMarshalByRef", EmitDefaultValue=false)]
        public bool? IsMarshalByRef { get; private set; }

        /// <summary>
        /// Gets or Sets IsPrimitive
        /// </summary>
        [DataMember(Name="isPrimitive", EmitDefaultValue=false)]
        public bool? IsPrimitive { get; private set; }

        /// <summary>
        /// Gets or Sets IsValueType
        /// </summary>
        [DataMember(Name="isValueType", EmitDefaultValue=false)]
        public bool? IsValueType { get; private set; }

        /// <summary>
        /// Gets or Sets IsSignatureType
        /// </summary>
        [DataMember(Name="isSignatureType", EmitDefaultValue=false)]
        public bool? IsSignatureType { get; private set; }

        /// <summary>
        /// Gets or Sets IsSecurityCritical
        /// </summary>
        [DataMember(Name="isSecurityCritical", EmitDefaultValue=false)]
        public bool? IsSecurityCritical { get; private set; }

        /// <summary>
        /// Gets or Sets IsSecuritySafeCritical
        /// </summary>
        [DataMember(Name="isSecuritySafeCritical", EmitDefaultValue=false)]
        public bool? IsSecuritySafeCritical { get; private set; }

        /// <summary>
        /// Gets or Sets IsSecurityTransparent
        /// </summary>
        [DataMember(Name="isSecurityTransparent", EmitDefaultValue=false)]
        public bool? IsSecurityTransparent { get; private set; }

        /// <summary>
        /// Gets or Sets StructLayoutAttribute
        /// </summary>
        [DataMember(Name="structLayoutAttribute", EmitDefaultValue=false)]
        public  StructLayoutAttribute { get; private set; }

        /// <summary>
        /// Gets or Sets TypeInitializer
        /// </summary>
        [DataMember(Name="typeInitializer", EmitDefaultValue=false)]
        public  TypeInitializer { get; private set; }

        /// <summary>
        /// Gets or Sets TypeHandle
        /// </summary>
        [DataMember(Name="typeHandle", EmitDefaultValue=false)]
        public  TypeHandle { get; private set; }

        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name="guid", EmitDefaultValue=false)]
        public Guid? Guid { get; private set; }

        /// <summary>
        /// Gets or Sets BaseType
        /// </summary>
        [DataMember(Name="baseType", EmitDefaultValue=false)]
        public  BaseType { get; private set; }

        /// <summary>
        /// Gets or Sets IsSerializable
        /// </summary>
        [DataMember(Name="isSerializable", EmitDefaultValue=false)]
        public bool? IsSerializable { get; private set; }

        /// <summary>
        /// Gets or Sets ContainsGenericParameters
        /// </summary>
        [DataMember(Name="containsGenericParameters", EmitDefaultValue=false)]
        public bool? ContainsGenericParameters { get; private set; }

        /// <summary>
        /// Gets or Sets IsVisible
        /// </summary>
        [DataMember(Name="isVisible", EmitDefaultValue=false)]
        public bool? IsVisible { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets CustomAttributes
        /// </summary>
        [DataMember(Name="customAttributes", EmitDefaultValue=false)]
        public List<CustomAttributeData> CustomAttributes { get; private set; }

        /// <summary>
        /// Gets or Sets IsCollectible
        /// </summary>
        [DataMember(Name="isCollectible", EmitDefaultValue=false)]
        public bool? IsCollectible { get; private set; }

        /// <summary>
        /// Gets or Sets MetadataToken
        /// </summary>
        [DataMember(Name="metadataToken", EmitDefaultValue=false)]
        public int? MetadataToken { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TypeInfo {\n");
            sb.Append("  GenericTypeParameters: ").Append(GenericTypeParameters).Append("\n");
            sb.Append("  DeclaredConstructors: ").Append(DeclaredConstructors).Append("\n");
            sb.Append("  DeclaredEvents: ").Append(DeclaredEvents).Append("\n");
            sb.Append("  DeclaredFields: ").Append(DeclaredFields).Append("\n");
            sb.Append("  DeclaredMembers: ").Append(DeclaredMembers).Append("\n");
            sb.Append("  DeclaredMethods: ").Append(DeclaredMethods).Append("\n");
            sb.Append("  DeclaredNestedTypes: ").Append(DeclaredNestedTypes).Append("\n");
            sb.Append("  DeclaredProperties: ").Append(DeclaredProperties).Append("\n");
            sb.Append("  ImplementedInterfaces: ").Append(ImplementedInterfaces).Append("\n");
            sb.Append("  IsInterface: ").Append(IsInterface).Append("\n");
            sb.Append("  MemberType: ").Append(MemberType).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  AssemblyQualifiedName: ").Append(AssemblyQualifiedName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Assembly: ").Append(Assembly).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  IsNested: ").Append(IsNested).Append("\n");
            sb.Append("  DeclaringType: ").Append(DeclaringType).Append("\n");
            sb.Append("  DeclaringMethod: ").Append(DeclaringMethod).Append("\n");
            sb.Append("  ReflectedType: ").Append(ReflectedType).Append("\n");
            sb.Append("  UnderlyingSystemType: ").Append(UnderlyingSystemType).Append("\n");
            sb.Append("  IsTypeDefinition: ").Append(IsTypeDefinition).Append("\n");
            sb.Append("  IsArray: ").Append(IsArray).Append("\n");
            sb.Append("  IsByRef: ").Append(IsByRef).Append("\n");
            sb.Append("  IsPointer: ").Append(IsPointer).Append("\n");
            sb.Append("  IsConstructedGenericType: ").Append(IsConstructedGenericType).Append("\n");
            sb.Append("  IsGenericParameter: ").Append(IsGenericParameter).Append("\n");
            sb.Append("  IsGenericTypeParameter: ").Append(IsGenericTypeParameter).Append("\n");
            sb.Append("  IsGenericMethodParameter: ").Append(IsGenericMethodParameter).Append("\n");
            sb.Append("  IsGenericType: ").Append(IsGenericType).Append("\n");
            sb.Append("  IsGenericTypeDefinition: ").Append(IsGenericTypeDefinition).Append("\n");
            sb.Append("  IsSZArray: ").Append(IsSZArray).Append("\n");
            sb.Append("  IsVariableBoundArray: ").Append(IsVariableBoundArray).Append("\n");
            sb.Append("  IsByRefLike: ").Append(IsByRefLike).Append("\n");
            sb.Append("  HasElementType: ").Append(HasElementType).Append("\n");
            sb.Append("  GenericTypeArguments: ").Append(GenericTypeArguments).Append("\n");
            sb.Append("  GenericParameterPosition: ").Append(GenericParameterPosition).Append("\n");
            sb.Append("  GenericParameterAttributes: ").Append(GenericParameterAttributes).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  IsAbstract: ").Append(IsAbstract).Append("\n");
            sb.Append("  IsImport: ").Append(IsImport).Append("\n");
            sb.Append("  IsSealed: ").Append(IsSealed).Append("\n");
            sb.Append("  IsSpecialName: ").Append(IsSpecialName).Append("\n");
            sb.Append("  IsClass: ").Append(IsClass).Append("\n");
            sb.Append("  IsNestedAssembly: ").Append(IsNestedAssembly).Append("\n");
            sb.Append("  IsNestedFamANDAssem: ").Append(IsNestedFamANDAssem).Append("\n");
            sb.Append("  IsNestedFamily: ").Append(IsNestedFamily).Append("\n");
            sb.Append("  IsNestedFamORAssem: ").Append(IsNestedFamORAssem).Append("\n");
            sb.Append("  IsNestedPrivate: ").Append(IsNestedPrivate).Append("\n");
            sb.Append("  IsNestedPublic: ").Append(IsNestedPublic).Append("\n");
            sb.Append("  IsNotPublic: ").Append(IsNotPublic).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsAutoLayout: ").Append(IsAutoLayout).Append("\n");
            sb.Append("  IsExplicitLayout: ").Append(IsExplicitLayout).Append("\n");
            sb.Append("  IsLayoutSequential: ").Append(IsLayoutSequential).Append("\n");
            sb.Append("  IsAnsiClass: ").Append(IsAnsiClass).Append("\n");
            sb.Append("  IsAutoClass: ").Append(IsAutoClass).Append("\n");
            sb.Append("  IsUnicodeClass: ").Append(IsUnicodeClass).Append("\n");
            sb.Append("  IsCOMObject: ").Append(IsCOMObject).Append("\n");
            sb.Append("  IsContextful: ").Append(IsContextful).Append("\n");
            sb.Append("  IsEnum: ").Append(IsEnum).Append("\n");
            sb.Append("  IsMarshalByRef: ").Append(IsMarshalByRef).Append("\n");
            sb.Append("  IsPrimitive: ").Append(IsPrimitive).Append("\n");
            sb.Append("  IsValueType: ").Append(IsValueType).Append("\n");
            sb.Append("  IsSignatureType: ").Append(IsSignatureType).Append("\n");
            sb.Append("  IsSecurityCritical: ").Append(IsSecurityCritical).Append("\n");
            sb.Append("  IsSecuritySafeCritical: ").Append(IsSecuritySafeCritical).Append("\n");
            sb.Append("  IsSecurityTransparent: ").Append(IsSecurityTransparent).Append("\n");
            sb.Append("  StructLayoutAttribute: ").Append(StructLayoutAttribute).Append("\n");
            sb.Append("  TypeInitializer: ").Append(TypeInitializer).Append("\n");
            sb.Append("  TypeHandle: ").Append(TypeHandle).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  BaseType: ").Append(BaseType).Append("\n");
            sb.Append("  IsSerializable: ").Append(IsSerializable).Append("\n");
            sb.Append("  ContainsGenericParameters: ").Append(ContainsGenericParameters).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  IsCollectible: ").Append(IsCollectible).Append("\n");
            sb.Append("  MetadataToken: ").Append(MetadataToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TypeInfo);
        }

        /// <summary>
        /// Returns true if TypeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TypeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypeInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GenericTypeParameters == input.GenericTypeParameters ||
                    this.GenericTypeParameters != null &&
                    input.GenericTypeParameters != null &&
                    this.GenericTypeParameters.SequenceEqual(input.GenericTypeParameters)
                ) && 
                (
                    this.DeclaredConstructors == input.DeclaredConstructors ||
                    this.DeclaredConstructors != null &&
                    input.DeclaredConstructors != null &&
                    this.DeclaredConstructors.SequenceEqual(input.DeclaredConstructors)
                ) && 
                (
                    this.DeclaredEvents == input.DeclaredEvents ||
                    this.DeclaredEvents != null &&
                    input.DeclaredEvents != null &&
                    this.DeclaredEvents.SequenceEqual(input.DeclaredEvents)
                ) && 
                (
                    this.DeclaredFields == input.DeclaredFields ||
                    this.DeclaredFields != null &&
                    input.DeclaredFields != null &&
                    this.DeclaredFields.SequenceEqual(input.DeclaredFields)
                ) && 
                (
                    this.DeclaredMembers == input.DeclaredMembers ||
                    this.DeclaredMembers != null &&
                    input.DeclaredMembers != null &&
                    this.DeclaredMembers.SequenceEqual(input.DeclaredMembers)
                ) && 
                (
                    this.DeclaredMethods == input.DeclaredMethods ||
                    this.DeclaredMethods != null &&
                    input.DeclaredMethods != null &&
                    this.DeclaredMethods.SequenceEqual(input.DeclaredMethods)
                ) && 
                (
                    this.DeclaredNestedTypes == input.DeclaredNestedTypes ||
                    this.DeclaredNestedTypes != null &&
                    input.DeclaredNestedTypes != null &&
                    this.DeclaredNestedTypes.SequenceEqual(input.DeclaredNestedTypes)
                ) && 
                (
                    this.DeclaredProperties == input.DeclaredProperties ||
                    this.DeclaredProperties != null &&
                    input.DeclaredProperties != null &&
                    this.DeclaredProperties.SequenceEqual(input.DeclaredProperties)
                ) && 
                (
                    this.ImplementedInterfaces == input.ImplementedInterfaces ||
                    this.ImplementedInterfaces != null &&
                    input.ImplementedInterfaces != null &&
                    this.ImplementedInterfaces.SequenceEqual(input.ImplementedInterfaces)
                ) && 
                (
                    this.IsInterface == input.IsInterface ||
                    (this.IsInterface != null &&
                    this.IsInterface.Equals(input.IsInterface))
                ) && 
                (
                    this.MemberType == input.MemberType ||
                    this.MemberType != null &&
                    input.MemberType != null &&
                    this.MemberType.SequenceEqual(input.MemberType)
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.AssemblyQualifiedName == input.AssemblyQualifiedName ||
                    (this.AssemblyQualifiedName != null &&
                    this.AssemblyQualifiedName.Equals(input.AssemblyQualifiedName))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Assembly == input.Assembly ||
                    this.Assembly != null &&
                    input.Assembly != null &&
                    this.Assembly.SequenceEqual(input.Assembly)
                ) && 
                (
                    this.Module == input.Module ||
                    this.Module != null &&
                    input.Module != null &&
                    this.Module.SequenceEqual(input.Module)
                ) && 
                (
                    this.IsNested == input.IsNested ||
                    (this.IsNested != null &&
                    this.IsNested.Equals(input.IsNested))
                ) && 
                (
                    this.DeclaringType == input.DeclaringType ||
                    this.DeclaringType != null &&
                    input.DeclaringType != null &&
                    this.DeclaringType.SequenceEqual(input.DeclaringType)
                ) && 
                (
                    this.DeclaringMethod == input.DeclaringMethod ||
                    this.DeclaringMethod != null &&
                    input.DeclaringMethod != null &&
                    this.DeclaringMethod.SequenceEqual(input.DeclaringMethod)
                ) && 
                (
                    this.ReflectedType == input.ReflectedType ||
                    this.ReflectedType != null &&
                    input.ReflectedType != null &&
                    this.ReflectedType.SequenceEqual(input.ReflectedType)
                ) && 
                (
                    this.UnderlyingSystemType == input.UnderlyingSystemType ||
                    this.UnderlyingSystemType != null &&
                    input.UnderlyingSystemType != null &&
                    this.UnderlyingSystemType.SequenceEqual(input.UnderlyingSystemType)
                ) && 
                (
                    this.IsTypeDefinition == input.IsTypeDefinition ||
                    (this.IsTypeDefinition != null &&
                    this.IsTypeDefinition.Equals(input.IsTypeDefinition))
                ) && 
                (
                    this.IsArray == input.IsArray ||
                    (this.IsArray != null &&
                    this.IsArray.Equals(input.IsArray))
                ) && 
                (
                    this.IsByRef == input.IsByRef ||
                    (this.IsByRef != null &&
                    this.IsByRef.Equals(input.IsByRef))
                ) && 
                (
                    this.IsPointer == input.IsPointer ||
                    (this.IsPointer != null &&
                    this.IsPointer.Equals(input.IsPointer))
                ) && 
                (
                    this.IsConstructedGenericType == input.IsConstructedGenericType ||
                    (this.IsConstructedGenericType != null &&
                    this.IsConstructedGenericType.Equals(input.IsConstructedGenericType))
                ) && 
                (
                    this.IsGenericParameter == input.IsGenericParameter ||
                    (this.IsGenericParameter != null &&
                    this.IsGenericParameter.Equals(input.IsGenericParameter))
                ) && 
                (
                    this.IsGenericTypeParameter == input.IsGenericTypeParameter ||
                    (this.IsGenericTypeParameter != null &&
                    this.IsGenericTypeParameter.Equals(input.IsGenericTypeParameter))
                ) && 
                (
                    this.IsGenericMethodParameter == input.IsGenericMethodParameter ||
                    (this.IsGenericMethodParameter != null &&
                    this.IsGenericMethodParameter.Equals(input.IsGenericMethodParameter))
                ) && 
                (
                    this.IsGenericType == input.IsGenericType ||
                    (this.IsGenericType != null &&
                    this.IsGenericType.Equals(input.IsGenericType))
                ) && 
                (
                    this.IsGenericTypeDefinition == input.IsGenericTypeDefinition ||
                    (this.IsGenericTypeDefinition != null &&
                    this.IsGenericTypeDefinition.Equals(input.IsGenericTypeDefinition))
                ) && 
                (
                    this.IsSZArray == input.IsSZArray ||
                    (this.IsSZArray != null &&
                    this.IsSZArray.Equals(input.IsSZArray))
                ) && 
                (
                    this.IsVariableBoundArray == input.IsVariableBoundArray ||
                    (this.IsVariableBoundArray != null &&
                    this.IsVariableBoundArray.Equals(input.IsVariableBoundArray))
                ) && 
                (
                    this.IsByRefLike == input.IsByRefLike ||
                    (this.IsByRefLike != null &&
                    this.IsByRefLike.Equals(input.IsByRefLike))
                ) && 
                (
                    this.HasElementType == input.HasElementType ||
                    (this.HasElementType != null &&
                    this.HasElementType.Equals(input.HasElementType))
                ) && 
                (
                    this.GenericTypeArguments == input.GenericTypeArguments ||
                    this.GenericTypeArguments != null &&
                    input.GenericTypeArguments != null &&
                    this.GenericTypeArguments.SequenceEqual(input.GenericTypeArguments)
                ) && 
                (
                    this.GenericParameterPosition == input.GenericParameterPosition ||
                    (this.GenericParameterPosition != null &&
                    this.GenericParameterPosition.Equals(input.GenericParameterPosition))
                ) && 
                (
                    this.GenericParameterAttributes == input.GenericParameterAttributes ||
                    this.GenericParameterAttributes != null &&
                    input.GenericParameterAttributes != null &&
                    this.GenericParameterAttributes.SequenceEqual(input.GenericParameterAttributes)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.IsAbstract == input.IsAbstract ||
                    (this.IsAbstract != null &&
                    this.IsAbstract.Equals(input.IsAbstract))
                ) && 
                (
                    this.IsImport == input.IsImport ||
                    (this.IsImport != null &&
                    this.IsImport.Equals(input.IsImport))
                ) && 
                (
                    this.IsSealed == input.IsSealed ||
                    (this.IsSealed != null &&
                    this.IsSealed.Equals(input.IsSealed))
                ) && 
                (
                    this.IsSpecialName == input.IsSpecialName ||
                    (this.IsSpecialName != null &&
                    this.IsSpecialName.Equals(input.IsSpecialName))
                ) && 
                (
                    this.IsClass == input.IsClass ||
                    (this.IsClass != null &&
                    this.IsClass.Equals(input.IsClass))
                ) && 
                (
                    this.IsNestedAssembly == input.IsNestedAssembly ||
                    (this.IsNestedAssembly != null &&
                    this.IsNestedAssembly.Equals(input.IsNestedAssembly))
                ) && 
                (
                    this.IsNestedFamANDAssem == input.IsNestedFamANDAssem ||
                    (this.IsNestedFamANDAssem != null &&
                    this.IsNestedFamANDAssem.Equals(input.IsNestedFamANDAssem))
                ) && 
                (
                    this.IsNestedFamily == input.IsNestedFamily ||
                    (this.IsNestedFamily != null &&
                    this.IsNestedFamily.Equals(input.IsNestedFamily))
                ) && 
                (
                    this.IsNestedFamORAssem == input.IsNestedFamORAssem ||
                    (this.IsNestedFamORAssem != null &&
                    this.IsNestedFamORAssem.Equals(input.IsNestedFamORAssem))
                ) && 
                (
                    this.IsNestedPrivate == input.IsNestedPrivate ||
                    (this.IsNestedPrivate != null &&
                    this.IsNestedPrivate.Equals(input.IsNestedPrivate))
                ) && 
                (
                    this.IsNestedPublic == input.IsNestedPublic ||
                    (this.IsNestedPublic != null &&
                    this.IsNestedPublic.Equals(input.IsNestedPublic))
                ) && 
                (
                    this.IsNotPublic == input.IsNotPublic ||
                    (this.IsNotPublic != null &&
                    this.IsNotPublic.Equals(input.IsNotPublic))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.IsAutoLayout == input.IsAutoLayout ||
                    (this.IsAutoLayout != null &&
                    this.IsAutoLayout.Equals(input.IsAutoLayout))
                ) && 
                (
                    this.IsExplicitLayout == input.IsExplicitLayout ||
                    (this.IsExplicitLayout != null &&
                    this.IsExplicitLayout.Equals(input.IsExplicitLayout))
                ) && 
                (
                    this.IsLayoutSequential == input.IsLayoutSequential ||
                    (this.IsLayoutSequential != null &&
                    this.IsLayoutSequential.Equals(input.IsLayoutSequential))
                ) && 
                (
                    this.IsAnsiClass == input.IsAnsiClass ||
                    (this.IsAnsiClass != null &&
                    this.IsAnsiClass.Equals(input.IsAnsiClass))
                ) && 
                (
                    this.IsAutoClass == input.IsAutoClass ||
                    (this.IsAutoClass != null &&
                    this.IsAutoClass.Equals(input.IsAutoClass))
                ) && 
                (
                    this.IsUnicodeClass == input.IsUnicodeClass ||
                    (this.IsUnicodeClass != null &&
                    this.IsUnicodeClass.Equals(input.IsUnicodeClass))
                ) && 
                (
                    this.IsCOMObject == input.IsCOMObject ||
                    (this.IsCOMObject != null &&
                    this.IsCOMObject.Equals(input.IsCOMObject))
                ) && 
                (
                    this.IsContextful == input.IsContextful ||
                    (this.IsContextful != null &&
                    this.IsContextful.Equals(input.IsContextful))
                ) && 
                (
                    this.IsEnum == input.IsEnum ||
                    (this.IsEnum != null &&
                    this.IsEnum.Equals(input.IsEnum))
                ) && 
                (
                    this.IsMarshalByRef == input.IsMarshalByRef ||
                    (this.IsMarshalByRef != null &&
                    this.IsMarshalByRef.Equals(input.IsMarshalByRef))
                ) && 
                (
                    this.IsPrimitive == input.IsPrimitive ||
                    (this.IsPrimitive != null &&
                    this.IsPrimitive.Equals(input.IsPrimitive))
                ) && 
                (
                    this.IsValueType == input.IsValueType ||
                    (this.IsValueType != null &&
                    this.IsValueType.Equals(input.IsValueType))
                ) && 
                (
                    this.IsSignatureType == input.IsSignatureType ||
                    (this.IsSignatureType != null &&
                    this.IsSignatureType.Equals(input.IsSignatureType))
                ) && 
                (
                    this.IsSecurityCritical == input.IsSecurityCritical ||
                    (this.IsSecurityCritical != null &&
                    this.IsSecurityCritical.Equals(input.IsSecurityCritical))
                ) && 
                (
                    this.IsSecuritySafeCritical == input.IsSecuritySafeCritical ||
                    (this.IsSecuritySafeCritical != null &&
                    this.IsSecuritySafeCritical.Equals(input.IsSecuritySafeCritical))
                ) && 
                (
                    this.IsSecurityTransparent == input.IsSecurityTransparent ||
                    (this.IsSecurityTransparent != null &&
                    this.IsSecurityTransparent.Equals(input.IsSecurityTransparent))
                ) && 
                (
                    this.StructLayoutAttribute == input.StructLayoutAttribute ||
                    this.StructLayoutAttribute != null &&
                    input.StructLayoutAttribute != null &&
                    this.StructLayoutAttribute.SequenceEqual(input.StructLayoutAttribute)
                ) && 
                (
                    this.TypeInitializer == input.TypeInitializer ||
                    this.TypeInitializer != null &&
                    input.TypeInitializer != null &&
                    this.TypeInitializer.SequenceEqual(input.TypeInitializer)
                ) && 
                (
                    this.TypeHandle == input.TypeHandle ||
                    this.TypeHandle != null &&
                    input.TypeHandle != null &&
                    this.TypeHandle.SequenceEqual(input.TypeHandle)
                ) && 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.BaseType == input.BaseType ||
                    this.BaseType != null &&
                    input.BaseType != null &&
                    this.BaseType.SequenceEqual(input.BaseType)
                ) && 
                (
                    this.IsSerializable == input.IsSerializable ||
                    (this.IsSerializable != null &&
                    this.IsSerializable.Equals(input.IsSerializable))
                ) && 
                (
                    this.ContainsGenericParameters == input.ContainsGenericParameters ||
                    (this.ContainsGenericParameters != null &&
                    this.ContainsGenericParameters.Equals(input.ContainsGenericParameters))
                ) && 
                (
                    this.IsVisible == input.IsVisible ||
                    (this.IsVisible != null &&
                    this.IsVisible.Equals(input.IsVisible))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CustomAttributes == input.CustomAttributes ||
                    this.CustomAttributes != null &&
                    input.CustomAttributes != null &&
                    this.CustomAttributes.SequenceEqual(input.CustomAttributes)
                ) && 
                (
                    this.IsCollectible == input.IsCollectible ||
                    (this.IsCollectible != null &&
                    this.IsCollectible.Equals(input.IsCollectible))
                ) && 
                (
                    this.MetadataToken == input.MetadataToken ||
                    (this.MetadataToken != null &&
                    this.MetadataToken.Equals(input.MetadataToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GenericTypeParameters != null)
                    hashCode = hashCode * 59 + this.GenericTypeParameters.GetHashCode();
                if (this.DeclaredConstructors != null)
                    hashCode = hashCode * 59 + this.DeclaredConstructors.GetHashCode();
                if (this.DeclaredEvents != null)
                    hashCode = hashCode * 59 + this.DeclaredEvents.GetHashCode();
                if (this.DeclaredFields != null)
                    hashCode = hashCode * 59 + this.DeclaredFields.GetHashCode();
                if (this.DeclaredMembers != null)
                    hashCode = hashCode * 59 + this.DeclaredMembers.GetHashCode();
                if (this.DeclaredMethods != null)
                    hashCode = hashCode * 59 + this.DeclaredMethods.GetHashCode();
                if (this.DeclaredNestedTypes != null)
                    hashCode = hashCode * 59 + this.DeclaredNestedTypes.GetHashCode();
                if (this.DeclaredProperties != null)
                    hashCode = hashCode * 59 + this.DeclaredProperties.GetHashCode();
                if (this.ImplementedInterfaces != null)
                    hashCode = hashCode * 59 + this.ImplementedInterfaces.GetHashCode();
                if (this.IsInterface != null)
                    hashCode = hashCode * 59 + this.IsInterface.GetHashCode();
                if (this.MemberType != null)
                    hashCode = hashCode * 59 + this.MemberType.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.AssemblyQualifiedName != null)
                    hashCode = hashCode * 59 + this.AssemblyQualifiedName.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Assembly != null)
                    hashCode = hashCode * 59 + this.Assembly.GetHashCode();
                if (this.Module != null)
                    hashCode = hashCode * 59 + this.Module.GetHashCode();
                if (this.IsNested != null)
                    hashCode = hashCode * 59 + this.IsNested.GetHashCode();
                if (this.DeclaringType != null)
                    hashCode = hashCode * 59 + this.DeclaringType.GetHashCode();
                if (this.DeclaringMethod != null)
                    hashCode = hashCode * 59 + this.DeclaringMethod.GetHashCode();
                if (this.ReflectedType != null)
                    hashCode = hashCode * 59 + this.ReflectedType.GetHashCode();
                if (this.UnderlyingSystemType != null)
                    hashCode = hashCode * 59 + this.UnderlyingSystemType.GetHashCode();
                if (this.IsTypeDefinition != null)
                    hashCode = hashCode * 59 + this.IsTypeDefinition.GetHashCode();
                if (this.IsArray != null)
                    hashCode = hashCode * 59 + this.IsArray.GetHashCode();
                if (this.IsByRef != null)
                    hashCode = hashCode * 59 + this.IsByRef.GetHashCode();
                if (this.IsPointer != null)
                    hashCode = hashCode * 59 + this.IsPointer.GetHashCode();
                if (this.IsConstructedGenericType != null)
                    hashCode = hashCode * 59 + this.IsConstructedGenericType.GetHashCode();
                if (this.IsGenericParameter != null)
                    hashCode = hashCode * 59 + this.IsGenericParameter.GetHashCode();
                if (this.IsGenericTypeParameter != null)
                    hashCode = hashCode * 59 + this.IsGenericTypeParameter.GetHashCode();
                if (this.IsGenericMethodParameter != null)
                    hashCode = hashCode * 59 + this.IsGenericMethodParameter.GetHashCode();
                if (this.IsGenericType != null)
                    hashCode = hashCode * 59 + this.IsGenericType.GetHashCode();
                if (this.IsGenericTypeDefinition != null)
                    hashCode = hashCode * 59 + this.IsGenericTypeDefinition.GetHashCode();
                if (this.IsSZArray != null)
                    hashCode = hashCode * 59 + this.IsSZArray.GetHashCode();
                if (this.IsVariableBoundArray != null)
                    hashCode = hashCode * 59 + this.IsVariableBoundArray.GetHashCode();
                if (this.IsByRefLike != null)
                    hashCode = hashCode * 59 + this.IsByRefLike.GetHashCode();
                if (this.HasElementType != null)
                    hashCode = hashCode * 59 + this.HasElementType.GetHashCode();
                if (this.GenericTypeArguments != null)
                    hashCode = hashCode * 59 + this.GenericTypeArguments.GetHashCode();
                if (this.GenericParameterPosition != null)
                    hashCode = hashCode * 59 + this.GenericParameterPosition.GetHashCode();
                if (this.GenericParameterAttributes != null)
                    hashCode = hashCode * 59 + this.GenericParameterAttributes.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.IsAbstract != null)
                    hashCode = hashCode * 59 + this.IsAbstract.GetHashCode();
                if (this.IsImport != null)
                    hashCode = hashCode * 59 + this.IsImport.GetHashCode();
                if (this.IsSealed != null)
                    hashCode = hashCode * 59 + this.IsSealed.GetHashCode();
                if (this.IsSpecialName != null)
                    hashCode = hashCode * 59 + this.IsSpecialName.GetHashCode();
                if (this.IsClass != null)
                    hashCode = hashCode * 59 + this.IsClass.GetHashCode();
                if (this.IsNestedAssembly != null)
                    hashCode = hashCode * 59 + this.IsNestedAssembly.GetHashCode();
                if (this.IsNestedFamANDAssem != null)
                    hashCode = hashCode * 59 + this.IsNestedFamANDAssem.GetHashCode();
                if (this.IsNestedFamily != null)
                    hashCode = hashCode * 59 + this.IsNestedFamily.GetHashCode();
                if (this.IsNestedFamORAssem != null)
                    hashCode = hashCode * 59 + this.IsNestedFamORAssem.GetHashCode();
                if (this.IsNestedPrivate != null)
                    hashCode = hashCode * 59 + this.IsNestedPrivate.GetHashCode();
                if (this.IsNestedPublic != null)
                    hashCode = hashCode * 59 + this.IsNestedPublic.GetHashCode();
                if (this.IsNotPublic != null)
                    hashCode = hashCode * 59 + this.IsNotPublic.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.IsAutoLayout != null)
                    hashCode = hashCode * 59 + this.IsAutoLayout.GetHashCode();
                if (this.IsExplicitLayout != null)
                    hashCode = hashCode * 59 + this.IsExplicitLayout.GetHashCode();
                if (this.IsLayoutSequential != null)
                    hashCode = hashCode * 59 + this.IsLayoutSequential.GetHashCode();
                if (this.IsAnsiClass != null)
                    hashCode = hashCode * 59 + this.IsAnsiClass.GetHashCode();
                if (this.IsAutoClass != null)
                    hashCode = hashCode * 59 + this.IsAutoClass.GetHashCode();
                if (this.IsUnicodeClass != null)
                    hashCode = hashCode * 59 + this.IsUnicodeClass.GetHashCode();
                if (this.IsCOMObject != null)
                    hashCode = hashCode * 59 + this.IsCOMObject.GetHashCode();
                if (this.IsContextful != null)
                    hashCode = hashCode * 59 + this.IsContextful.GetHashCode();
                if (this.IsEnum != null)
                    hashCode = hashCode * 59 + this.IsEnum.GetHashCode();
                if (this.IsMarshalByRef != null)
                    hashCode = hashCode * 59 + this.IsMarshalByRef.GetHashCode();
                if (this.IsPrimitive != null)
                    hashCode = hashCode * 59 + this.IsPrimitive.GetHashCode();
                if (this.IsValueType != null)
                    hashCode = hashCode * 59 + this.IsValueType.GetHashCode();
                if (this.IsSignatureType != null)
                    hashCode = hashCode * 59 + this.IsSignatureType.GetHashCode();
                if (this.IsSecurityCritical != null)
                    hashCode = hashCode * 59 + this.IsSecurityCritical.GetHashCode();
                if (this.IsSecuritySafeCritical != null)
                    hashCode = hashCode * 59 + this.IsSecuritySafeCritical.GetHashCode();
                if (this.IsSecurityTransparent != null)
                    hashCode = hashCode * 59 + this.IsSecurityTransparent.GetHashCode();
                if (this.StructLayoutAttribute != null)
                    hashCode = hashCode * 59 + this.StructLayoutAttribute.GetHashCode();
                if (this.TypeInitializer != null)
                    hashCode = hashCode * 59 + this.TypeInitializer.GetHashCode();
                if (this.TypeHandle != null)
                    hashCode = hashCode * 59 + this.TypeHandle.GetHashCode();
                if (this.Guid != null)
                    hashCode = hashCode * 59 + this.Guid.GetHashCode();
                if (this.BaseType != null)
                    hashCode = hashCode * 59 + this.BaseType.GetHashCode();
                if (this.IsSerializable != null)
                    hashCode = hashCode * 59 + this.IsSerializable.GetHashCode();
                if (this.ContainsGenericParameters != null)
                    hashCode = hashCode * 59 + this.ContainsGenericParameters.GetHashCode();
                if (this.IsVisible != null)
                    hashCode = hashCode * 59 + this.IsVisible.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CustomAttributes != null)
                    hashCode = hashCode * 59 + this.CustomAttributes.GetHashCode();
                if (this.IsCollectible != null)
                    hashCode = hashCode * 59 + this.IsCollectible.GetHashCode();
                if (this.MetadataToken != null)
                    hashCode = hashCode * 59 + this.MetadataToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
