/* 
 * Library API
 *
 * Through this API you can access authors and their books
 *
 * OpenAPI spec version: 1.0
 * Contact: bailleul.sacha@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PropertyInfo
    /// </summary>
    [DataContract]
        public partial class PropertyInfo :  IEquatable<PropertyInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyInfo" /> class.
        /// </summary>
        public PropertyInfo()
        {
        }
        
        /// <summary>
        /// Gets or Sets MemberType
        /// </summary>
        [DataMember(Name="memberType", EmitDefaultValue=false)]
        public  MemberType { get; private set; }

        /// <summary>
        /// Gets or Sets PropertyType
        /// </summary>
        [DataMember(Name="propertyType", EmitDefaultValue=false)]
        public  PropertyType { get; private set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public  Attributes { get; private set; }

        /// <summary>
        /// Gets or Sets IsSpecialName
        /// </summary>
        [DataMember(Name="isSpecialName", EmitDefaultValue=false)]
        public bool? IsSpecialName { get; private set; }

        /// <summary>
        /// Gets or Sets CanRead
        /// </summary>
        [DataMember(Name="canRead", EmitDefaultValue=false)]
        public bool? CanRead { get; private set; }

        /// <summary>
        /// Gets or Sets CanWrite
        /// </summary>
        [DataMember(Name="canWrite", EmitDefaultValue=false)]
        public bool? CanWrite { get; private set; }

        /// <summary>
        /// Gets or Sets GetMethod
        /// </summary>
        [DataMember(Name="getMethod", EmitDefaultValue=false)]
        public  GetMethod { get; private set; }

        /// <summary>
        /// Gets or Sets SetMethod
        /// </summary>
        [DataMember(Name="setMethod", EmitDefaultValue=false)]
        public  SetMethod { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaringType
        /// </summary>
        [DataMember(Name="declaringType", EmitDefaultValue=false)]
        public  DeclaringType { get; private set; }

        /// <summary>
        /// Gets or Sets ReflectedType
        /// </summary>
        [DataMember(Name="reflectedType", EmitDefaultValue=false)]
        public  ReflectedType { get; private set; }

        /// <summary>
        /// Gets or Sets Module
        /// </summary>
        [DataMember(Name="module", EmitDefaultValue=false)]
        public  Module { get; private set; }

        /// <summary>
        /// Gets or Sets CustomAttributes
        /// </summary>
        [DataMember(Name="customAttributes", EmitDefaultValue=false)]
        public List<CustomAttributeData> CustomAttributes { get; private set; }

        /// <summary>
        /// Gets or Sets IsCollectible
        /// </summary>
        [DataMember(Name="isCollectible", EmitDefaultValue=false)]
        public bool? IsCollectible { get; private set; }

        /// <summary>
        /// Gets or Sets MetadataToken
        /// </summary>
        [DataMember(Name="metadataToken", EmitDefaultValue=false)]
        public int? MetadataToken { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertyInfo {\n");
            sb.Append("  MemberType: ").Append(MemberType).Append("\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  IsSpecialName: ").Append(IsSpecialName).Append("\n");
            sb.Append("  CanRead: ").Append(CanRead).Append("\n");
            sb.Append("  CanWrite: ").Append(CanWrite).Append("\n");
            sb.Append("  GetMethod: ").Append(GetMethod).Append("\n");
            sb.Append("  SetMethod: ").Append(SetMethod).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DeclaringType: ").Append(DeclaringType).Append("\n");
            sb.Append("  ReflectedType: ").Append(ReflectedType).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  IsCollectible: ").Append(IsCollectible).Append("\n");
            sb.Append("  MetadataToken: ").Append(MetadataToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertyInfo);
        }

        /// <summary>
        /// Returns true if PropertyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MemberType == input.MemberType ||
                    this.MemberType != null &&
                    input.MemberType != null &&
                    this.MemberType.SequenceEqual(input.MemberType)
                ) && 
                (
                    this.PropertyType == input.PropertyType ||
                    this.PropertyType != null &&
                    input.PropertyType != null &&
                    this.PropertyType.SequenceEqual(input.PropertyType)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.IsSpecialName == input.IsSpecialName ||
                    (this.IsSpecialName != null &&
                    this.IsSpecialName.Equals(input.IsSpecialName))
                ) && 
                (
                    this.CanRead == input.CanRead ||
                    (this.CanRead != null &&
                    this.CanRead.Equals(input.CanRead))
                ) && 
                (
                    this.CanWrite == input.CanWrite ||
                    (this.CanWrite != null &&
                    this.CanWrite.Equals(input.CanWrite))
                ) && 
                (
                    this.GetMethod == input.GetMethod ||
                    this.GetMethod != null &&
                    input.GetMethod != null &&
                    this.GetMethod.SequenceEqual(input.GetMethod)
                ) && 
                (
                    this.SetMethod == input.SetMethod ||
                    this.SetMethod != null &&
                    input.SetMethod != null &&
                    this.SetMethod.SequenceEqual(input.SetMethod)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DeclaringType == input.DeclaringType ||
                    this.DeclaringType != null &&
                    input.DeclaringType != null &&
                    this.DeclaringType.SequenceEqual(input.DeclaringType)
                ) && 
                (
                    this.ReflectedType == input.ReflectedType ||
                    this.ReflectedType != null &&
                    input.ReflectedType != null &&
                    this.ReflectedType.SequenceEqual(input.ReflectedType)
                ) && 
                (
                    this.Module == input.Module ||
                    this.Module != null &&
                    input.Module != null &&
                    this.Module.SequenceEqual(input.Module)
                ) && 
                (
                    this.CustomAttributes == input.CustomAttributes ||
                    this.CustomAttributes != null &&
                    input.CustomAttributes != null &&
                    this.CustomAttributes.SequenceEqual(input.CustomAttributes)
                ) && 
                (
                    this.IsCollectible == input.IsCollectible ||
                    (this.IsCollectible != null &&
                    this.IsCollectible.Equals(input.IsCollectible))
                ) && 
                (
                    this.MetadataToken == input.MetadataToken ||
                    (this.MetadataToken != null &&
                    this.MetadataToken.Equals(input.MetadataToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MemberType != null)
                    hashCode = hashCode * 59 + this.MemberType.GetHashCode();
                if (this.PropertyType != null)
                    hashCode = hashCode * 59 + this.PropertyType.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.IsSpecialName != null)
                    hashCode = hashCode * 59 + this.IsSpecialName.GetHashCode();
                if (this.CanRead != null)
                    hashCode = hashCode * 59 + this.CanRead.GetHashCode();
                if (this.CanWrite != null)
                    hashCode = hashCode * 59 + this.CanWrite.GetHashCode();
                if (this.GetMethod != null)
                    hashCode = hashCode * 59 + this.GetMethod.GetHashCode();
                if (this.SetMethod != null)
                    hashCode = hashCode * 59 + this.SetMethod.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DeclaringType != null)
                    hashCode = hashCode * 59 + this.DeclaringType.GetHashCode();
                if (this.ReflectedType != null)
                    hashCode = hashCode * 59 + this.ReflectedType.GetHashCode();
                if (this.Module != null)
                    hashCode = hashCode * 59 + this.Module.GetHashCode();
                if (this.CustomAttributes != null)
                    hashCode = hashCode * 59 + this.CustomAttributes.GetHashCode();
                if (this.IsCollectible != null)
                    hashCode = hashCode * 59 + this.IsCollectible.GetHashCode();
                if (this.MetadataToken != null)
                    hashCode = hashCode * 59 + this.MetadataToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
