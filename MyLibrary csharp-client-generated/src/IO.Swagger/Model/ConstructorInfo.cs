/* 
 * Library API
 *
 * Through this API you can access authors and their books
 *
 * OpenAPI spec version: 1.0
 * Contact: bailleul.sacha@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ConstructorInfo
    /// </summary>
    [DataContract]
        public partial class ConstructorInfo :  IEquatable<ConstructorInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructorInfo" /> class.
        /// </summary>
        public ConstructorInfo()
        {
        }
        
        /// <summary>
        /// Gets or Sets MemberType
        /// </summary>
        [DataMember(Name="memberType", EmitDefaultValue=false)]
        public  MemberType { get; private set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public  Attributes { get; private set; }

        /// <summary>
        /// Gets or Sets MethodImplementationFlags
        /// </summary>
        [DataMember(Name="methodImplementationFlags", EmitDefaultValue=false)]
        public  MethodImplementationFlags { get; private set; }

        /// <summary>
        /// Gets or Sets CallingConvention
        /// </summary>
        [DataMember(Name="callingConvention", EmitDefaultValue=false)]
        public  CallingConvention { get; private set; }

        /// <summary>
        /// Gets or Sets IsAbstract
        /// </summary>
        [DataMember(Name="isAbstract", EmitDefaultValue=false)]
        public bool? IsAbstract { get; private set; }

        /// <summary>
        /// Gets or Sets IsConstructor
        /// </summary>
        [DataMember(Name="isConstructor", EmitDefaultValue=false)]
        public bool? IsConstructor { get; private set; }

        /// <summary>
        /// Gets or Sets IsFinal
        /// </summary>
        [DataMember(Name="isFinal", EmitDefaultValue=false)]
        public bool? IsFinal { get; private set; }

        /// <summary>
        /// Gets or Sets IsHideBySig
        /// </summary>
        [DataMember(Name="isHideBySig", EmitDefaultValue=false)]
        public bool? IsHideBySig { get; private set; }

        /// <summary>
        /// Gets or Sets IsSpecialName
        /// </summary>
        [DataMember(Name="isSpecialName", EmitDefaultValue=false)]
        public bool? IsSpecialName { get; private set; }

        /// <summary>
        /// Gets or Sets IsStatic
        /// </summary>
        [DataMember(Name="isStatic", EmitDefaultValue=false)]
        public bool? IsStatic { get; private set; }

        /// <summary>
        /// Gets or Sets IsVirtual
        /// </summary>
        [DataMember(Name="isVirtual", EmitDefaultValue=false)]
        public bool? IsVirtual { get; private set; }

        /// <summary>
        /// Gets or Sets IsAssembly
        /// </summary>
        [DataMember(Name="isAssembly", EmitDefaultValue=false)]
        public bool? IsAssembly { get; private set; }

        /// <summary>
        /// Gets or Sets IsFamily
        /// </summary>
        [DataMember(Name="isFamily", EmitDefaultValue=false)]
        public bool? IsFamily { get; private set; }

        /// <summary>
        /// Gets or Sets IsFamilyAndAssembly
        /// </summary>
        [DataMember(Name="isFamilyAndAssembly", EmitDefaultValue=false)]
        public bool? IsFamilyAndAssembly { get; private set; }

        /// <summary>
        /// Gets or Sets IsFamilyOrAssembly
        /// </summary>
        [DataMember(Name="isFamilyOrAssembly", EmitDefaultValue=false)]
        public bool? IsFamilyOrAssembly { get; private set; }

        /// <summary>
        /// Gets or Sets IsPrivate
        /// </summary>
        [DataMember(Name="isPrivate", EmitDefaultValue=false)]
        public bool? IsPrivate { get; private set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="isPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; private set; }

        /// <summary>
        /// Gets or Sets IsConstructedGenericMethod
        /// </summary>
        [DataMember(Name="isConstructedGenericMethod", EmitDefaultValue=false)]
        public bool? IsConstructedGenericMethod { get; private set; }

        /// <summary>
        /// Gets or Sets IsGenericMethod
        /// </summary>
        [DataMember(Name="isGenericMethod", EmitDefaultValue=false)]
        public bool? IsGenericMethod { get; private set; }

        /// <summary>
        /// Gets or Sets IsGenericMethodDefinition
        /// </summary>
        [DataMember(Name="isGenericMethodDefinition", EmitDefaultValue=false)]
        public bool? IsGenericMethodDefinition { get; private set; }

        /// <summary>
        /// Gets or Sets ContainsGenericParameters
        /// </summary>
        [DataMember(Name="containsGenericParameters", EmitDefaultValue=false)]
        public bool? ContainsGenericParameters { get; private set; }

        /// <summary>
        /// Gets or Sets MethodHandle
        /// </summary>
        [DataMember(Name="methodHandle", EmitDefaultValue=false)]
        public  MethodHandle { get; private set; }

        /// <summary>
        /// Gets or Sets IsSecurityCritical
        /// </summary>
        [DataMember(Name="isSecurityCritical", EmitDefaultValue=false)]
        public bool? IsSecurityCritical { get; private set; }

        /// <summary>
        /// Gets or Sets IsSecuritySafeCritical
        /// </summary>
        [DataMember(Name="isSecuritySafeCritical", EmitDefaultValue=false)]
        public bool? IsSecuritySafeCritical { get; private set; }

        /// <summary>
        /// Gets or Sets IsSecurityTransparent
        /// </summary>
        [DataMember(Name="isSecurityTransparent", EmitDefaultValue=false)]
        public bool? IsSecurityTransparent { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets DeclaringType
        /// </summary>
        [DataMember(Name="declaringType", EmitDefaultValue=false)]
        public  DeclaringType { get; private set; }

        /// <summary>
        /// Gets or Sets ReflectedType
        /// </summary>
        [DataMember(Name="reflectedType", EmitDefaultValue=false)]
        public  ReflectedType { get; private set; }

        /// <summary>
        /// Gets or Sets Module
        /// </summary>
        [DataMember(Name="module", EmitDefaultValue=false)]
        public  Module { get; private set; }

        /// <summary>
        /// Gets or Sets CustomAttributes
        /// </summary>
        [DataMember(Name="customAttributes", EmitDefaultValue=false)]
        public List<CustomAttributeData> CustomAttributes { get; private set; }

        /// <summary>
        /// Gets or Sets IsCollectible
        /// </summary>
        [DataMember(Name="isCollectible", EmitDefaultValue=false)]
        public bool? IsCollectible { get; private set; }

        /// <summary>
        /// Gets or Sets MetadataToken
        /// </summary>
        [DataMember(Name="metadataToken", EmitDefaultValue=false)]
        public int? MetadataToken { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConstructorInfo {\n");
            sb.Append("  MemberType: ").Append(MemberType).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  MethodImplementationFlags: ").Append(MethodImplementationFlags).Append("\n");
            sb.Append("  CallingConvention: ").Append(CallingConvention).Append("\n");
            sb.Append("  IsAbstract: ").Append(IsAbstract).Append("\n");
            sb.Append("  IsConstructor: ").Append(IsConstructor).Append("\n");
            sb.Append("  IsFinal: ").Append(IsFinal).Append("\n");
            sb.Append("  IsHideBySig: ").Append(IsHideBySig).Append("\n");
            sb.Append("  IsSpecialName: ").Append(IsSpecialName).Append("\n");
            sb.Append("  IsStatic: ").Append(IsStatic).Append("\n");
            sb.Append("  IsVirtual: ").Append(IsVirtual).Append("\n");
            sb.Append("  IsAssembly: ").Append(IsAssembly).Append("\n");
            sb.Append("  IsFamily: ").Append(IsFamily).Append("\n");
            sb.Append("  IsFamilyAndAssembly: ").Append(IsFamilyAndAssembly).Append("\n");
            sb.Append("  IsFamilyOrAssembly: ").Append(IsFamilyOrAssembly).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsConstructedGenericMethod: ").Append(IsConstructedGenericMethod).Append("\n");
            sb.Append("  IsGenericMethod: ").Append(IsGenericMethod).Append("\n");
            sb.Append("  IsGenericMethodDefinition: ").Append(IsGenericMethodDefinition).Append("\n");
            sb.Append("  ContainsGenericParameters: ").Append(ContainsGenericParameters).Append("\n");
            sb.Append("  MethodHandle: ").Append(MethodHandle).Append("\n");
            sb.Append("  IsSecurityCritical: ").Append(IsSecurityCritical).Append("\n");
            sb.Append("  IsSecuritySafeCritical: ").Append(IsSecuritySafeCritical).Append("\n");
            sb.Append("  IsSecurityTransparent: ").Append(IsSecurityTransparent).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DeclaringType: ").Append(DeclaringType).Append("\n");
            sb.Append("  ReflectedType: ").Append(ReflectedType).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  IsCollectible: ").Append(IsCollectible).Append("\n");
            sb.Append("  MetadataToken: ").Append(MetadataToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstructorInfo);
        }

        /// <summary>
        /// Returns true if ConstructorInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstructorInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstructorInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MemberType == input.MemberType ||
                    this.MemberType != null &&
                    input.MemberType != null &&
                    this.MemberType.SequenceEqual(input.MemberType)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.MethodImplementationFlags == input.MethodImplementationFlags ||
                    this.MethodImplementationFlags != null &&
                    input.MethodImplementationFlags != null &&
                    this.MethodImplementationFlags.SequenceEqual(input.MethodImplementationFlags)
                ) && 
                (
                    this.CallingConvention == input.CallingConvention ||
                    this.CallingConvention != null &&
                    input.CallingConvention != null &&
                    this.CallingConvention.SequenceEqual(input.CallingConvention)
                ) && 
                (
                    this.IsAbstract == input.IsAbstract ||
                    (this.IsAbstract != null &&
                    this.IsAbstract.Equals(input.IsAbstract))
                ) && 
                (
                    this.IsConstructor == input.IsConstructor ||
                    (this.IsConstructor != null &&
                    this.IsConstructor.Equals(input.IsConstructor))
                ) && 
                (
                    this.IsFinal == input.IsFinal ||
                    (this.IsFinal != null &&
                    this.IsFinal.Equals(input.IsFinal))
                ) && 
                (
                    this.IsHideBySig == input.IsHideBySig ||
                    (this.IsHideBySig != null &&
                    this.IsHideBySig.Equals(input.IsHideBySig))
                ) && 
                (
                    this.IsSpecialName == input.IsSpecialName ||
                    (this.IsSpecialName != null &&
                    this.IsSpecialName.Equals(input.IsSpecialName))
                ) && 
                (
                    this.IsStatic == input.IsStatic ||
                    (this.IsStatic != null &&
                    this.IsStatic.Equals(input.IsStatic))
                ) && 
                (
                    this.IsVirtual == input.IsVirtual ||
                    (this.IsVirtual != null &&
                    this.IsVirtual.Equals(input.IsVirtual))
                ) && 
                (
                    this.IsAssembly == input.IsAssembly ||
                    (this.IsAssembly != null &&
                    this.IsAssembly.Equals(input.IsAssembly))
                ) && 
                (
                    this.IsFamily == input.IsFamily ||
                    (this.IsFamily != null &&
                    this.IsFamily.Equals(input.IsFamily))
                ) && 
                (
                    this.IsFamilyAndAssembly == input.IsFamilyAndAssembly ||
                    (this.IsFamilyAndAssembly != null &&
                    this.IsFamilyAndAssembly.Equals(input.IsFamilyAndAssembly))
                ) && 
                (
                    this.IsFamilyOrAssembly == input.IsFamilyOrAssembly ||
                    (this.IsFamilyOrAssembly != null &&
                    this.IsFamilyOrAssembly.Equals(input.IsFamilyOrAssembly))
                ) && 
                (
                    this.IsPrivate == input.IsPrivate ||
                    (this.IsPrivate != null &&
                    this.IsPrivate.Equals(input.IsPrivate))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.IsConstructedGenericMethod == input.IsConstructedGenericMethod ||
                    (this.IsConstructedGenericMethod != null &&
                    this.IsConstructedGenericMethod.Equals(input.IsConstructedGenericMethod))
                ) && 
                (
                    this.IsGenericMethod == input.IsGenericMethod ||
                    (this.IsGenericMethod != null &&
                    this.IsGenericMethod.Equals(input.IsGenericMethod))
                ) && 
                (
                    this.IsGenericMethodDefinition == input.IsGenericMethodDefinition ||
                    (this.IsGenericMethodDefinition != null &&
                    this.IsGenericMethodDefinition.Equals(input.IsGenericMethodDefinition))
                ) && 
                (
                    this.ContainsGenericParameters == input.ContainsGenericParameters ||
                    (this.ContainsGenericParameters != null &&
                    this.ContainsGenericParameters.Equals(input.ContainsGenericParameters))
                ) && 
                (
                    this.MethodHandle == input.MethodHandle ||
                    this.MethodHandle != null &&
                    input.MethodHandle != null &&
                    this.MethodHandle.SequenceEqual(input.MethodHandle)
                ) && 
                (
                    this.IsSecurityCritical == input.IsSecurityCritical ||
                    (this.IsSecurityCritical != null &&
                    this.IsSecurityCritical.Equals(input.IsSecurityCritical))
                ) && 
                (
                    this.IsSecuritySafeCritical == input.IsSecuritySafeCritical ||
                    (this.IsSecuritySafeCritical != null &&
                    this.IsSecuritySafeCritical.Equals(input.IsSecuritySafeCritical))
                ) && 
                (
                    this.IsSecurityTransparent == input.IsSecurityTransparent ||
                    (this.IsSecurityTransparent != null &&
                    this.IsSecurityTransparent.Equals(input.IsSecurityTransparent))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DeclaringType == input.DeclaringType ||
                    this.DeclaringType != null &&
                    input.DeclaringType != null &&
                    this.DeclaringType.SequenceEqual(input.DeclaringType)
                ) && 
                (
                    this.ReflectedType == input.ReflectedType ||
                    this.ReflectedType != null &&
                    input.ReflectedType != null &&
                    this.ReflectedType.SequenceEqual(input.ReflectedType)
                ) && 
                (
                    this.Module == input.Module ||
                    this.Module != null &&
                    input.Module != null &&
                    this.Module.SequenceEqual(input.Module)
                ) && 
                (
                    this.CustomAttributes == input.CustomAttributes ||
                    this.CustomAttributes != null &&
                    input.CustomAttributes != null &&
                    this.CustomAttributes.SequenceEqual(input.CustomAttributes)
                ) && 
                (
                    this.IsCollectible == input.IsCollectible ||
                    (this.IsCollectible != null &&
                    this.IsCollectible.Equals(input.IsCollectible))
                ) && 
                (
                    this.MetadataToken == input.MetadataToken ||
                    (this.MetadataToken != null &&
                    this.MetadataToken.Equals(input.MetadataToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MemberType != null)
                    hashCode = hashCode * 59 + this.MemberType.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.MethodImplementationFlags != null)
                    hashCode = hashCode * 59 + this.MethodImplementationFlags.GetHashCode();
                if (this.CallingConvention != null)
                    hashCode = hashCode * 59 + this.CallingConvention.GetHashCode();
                if (this.IsAbstract != null)
                    hashCode = hashCode * 59 + this.IsAbstract.GetHashCode();
                if (this.IsConstructor != null)
                    hashCode = hashCode * 59 + this.IsConstructor.GetHashCode();
                if (this.IsFinal != null)
                    hashCode = hashCode * 59 + this.IsFinal.GetHashCode();
                if (this.IsHideBySig != null)
                    hashCode = hashCode * 59 + this.IsHideBySig.GetHashCode();
                if (this.IsSpecialName != null)
                    hashCode = hashCode * 59 + this.IsSpecialName.GetHashCode();
                if (this.IsStatic != null)
                    hashCode = hashCode * 59 + this.IsStatic.GetHashCode();
                if (this.IsVirtual != null)
                    hashCode = hashCode * 59 + this.IsVirtual.GetHashCode();
                if (this.IsAssembly != null)
                    hashCode = hashCode * 59 + this.IsAssembly.GetHashCode();
                if (this.IsFamily != null)
                    hashCode = hashCode * 59 + this.IsFamily.GetHashCode();
                if (this.IsFamilyAndAssembly != null)
                    hashCode = hashCode * 59 + this.IsFamilyAndAssembly.GetHashCode();
                if (this.IsFamilyOrAssembly != null)
                    hashCode = hashCode * 59 + this.IsFamilyOrAssembly.GetHashCode();
                if (this.IsPrivate != null)
                    hashCode = hashCode * 59 + this.IsPrivate.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.IsConstructedGenericMethod != null)
                    hashCode = hashCode * 59 + this.IsConstructedGenericMethod.GetHashCode();
                if (this.IsGenericMethod != null)
                    hashCode = hashCode * 59 + this.IsGenericMethod.GetHashCode();
                if (this.IsGenericMethodDefinition != null)
                    hashCode = hashCode * 59 + this.IsGenericMethodDefinition.GetHashCode();
                if (this.ContainsGenericParameters != null)
                    hashCode = hashCode * 59 + this.ContainsGenericParameters.GetHashCode();
                if (this.MethodHandle != null)
                    hashCode = hashCode * 59 + this.MethodHandle.GetHashCode();
                if (this.IsSecurityCritical != null)
                    hashCode = hashCode * 59 + this.IsSecurityCritical.GetHashCode();
                if (this.IsSecuritySafeCritical != null)
                    hashCode = hashCode * 59 + this.IsSecuritySafeCritical.GetHashCode();
                if (this.IsSecurityTransparent != null)
                    hashCode = hashCode * 59 + this.IsSecurityTransparent.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DeclaringType != null)
                    hashCode = hashCode * 59 + this.DeclaringType.GetHashCode();
                if (this.ReflectedType != null)
                    hashCode = hashCode * 59 + this.ReflectedType.GetHashCode();
                if (this.Module != null)
                    hashCode = hashCode * 59 + this.Module.GetHashCode();
                if (this.CustomAttributes != null)
                    hashCode = hashCode * 59 + this.CustomAttributes.GetHashCode();
                if (this.IsCollectible != null)
                    hashCode = hashCode * 59 + this.IsCollectible.GetHashCode();
                if (this.MetadataToken != null)
                    hashCode = hashCode * 59 + this.MetadataToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
