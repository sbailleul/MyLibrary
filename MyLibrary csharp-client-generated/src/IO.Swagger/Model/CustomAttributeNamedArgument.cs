/* 
 * Library API
 *
 * Through this API you can access authors and their books
 *
 * OpenAPI spec version: 1.0
 * Contact: bailleul.sacha@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomAttributeNamedArgument
    /// </summary>
    [DataContract]
        public partial class CustomAttributeNamedArgument :  IEquatable<CustomAttributeNamedArgument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAttributeNamedArgument" /> class.
        /// </summary>
        public CustomAttributeNamedArgument()
        {
        }
        
        /// <summary>
        /// Gets or Sets MemberInfo
        /// </summary>
        [DataMember(Name="memberInfo", EmitDefaultValue=false)]
        public  MemberInfo { get; private set; }

        /// <summary>
        /// Gets or Sets TypedValue
        /// </summary>
        [DataMember(Name="typedValue", EmitDefaultValue=false)]
        public  TypedValue { get; private set; }

        /// <summary>
        /// Gets or Sets MemberName
        /// </summary>
        [DataMember(Name="memberName", EmitDefaultValue=false)]
        public string MemberName { get; private set; }

        /// <summary>
        /// Gets or Sets IsField
        /// </summary>
        [DataMember(Name="isField", EmitDefaultValue=false)]
        public bool? IsField { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomAttributeNamedArgument {\n");
            sb.Append("  MemberInfo: ").Append(MemberInfo).Append("\n");
            sb.Append("  TypedValue: ").Append(TypedValue).Append("\n");
            sb.Append("  MemberName: ").Append(MemberName).Append("\n");
            sb.Append("  IsField: ").Append(IsField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomAttributeNamedArgument);
        }

        /// <summary>
        /// Returns true if CustomAttributeNamedArgument instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomAttributeNamedArgument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomAttributeNamedArgument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MemberInfo == input.MemberInfo ||
                    this.MemberInfo != null &&
                    input.MemberInfo != null &&
                    this.MemberInfo.SequenceEqual(input.MemberInfo)
                ) && 
                (
                    this.TypedValue == input.TypedValue ||
                    this.TypedValue != null &&
                    input.TypedValue != null &&
                    this.TypedValue.SequenceEqual(input.TypedValue)
                ) && 
                (
                    this.MemberName == input.MemberName ||
                    (this.MemberName != null &&
                    this.MemberName.Equals(input.MemberName))
                ) && 
                (
                    this.IsField == input.IsField ||
                    (this.IsField != null &&
                    this.IsField.Equals(input.IsField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MemberInfo != null)
                    hashCode = hashCode * 59 + this.MemberInfo.GetHashCode();
                if (this.TypedValue != null)
                    hashCode = hashCode * 59 + this.TypedValue.GetHashCode();
                if (this.MemberName != null)
                    hashCode = hashCode * 59 + this.MemberName.GetHashCode();
                if (this.IsField != null)
                    hashCode = hashCode * 59 + this.IsField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
