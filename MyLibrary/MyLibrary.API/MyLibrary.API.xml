<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyLibrary.API</name>
    </assembly>
    <members>
        <member name="M:Library.API.Controllers.AuthorsController.GetAuthor(System.Guid)">
            <summary>
                Get an author by her/his id
            </summary>
            <param name="authorId">The id of the author you want to get</param>
            <returns>An ActionResult of type Author</returns>
        </member>
        <member name="M:Library.API.Controllers.AuthorsController.UpdateAuthor(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{Library.API.Models.AuthorForUpdate})">
            <summary>
                Partially update and author
            </summary>
            <param name="authorId">The id of the author you want to update</param>
            <param name="patchDocument">The set of operations to apply to author</param>
            <returns>Return an ActionResult of type of Author</returns>
            <remarks>
                Sample request (this request update the author's **first name**) 
                ```json
                PATCH /authors/id
                [ 
                    { 
                        "op": "replace", 
                        "path": "/firstname", 
                        "value": "new first name" 
                    } 
                ]
            </remarks>
        </member>
        <member name="M:Library.API.Controllers.AuthorsControllerV2.GetAuthors">
            <summary>
            Get the authors (V2)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.BooksController.GetBooks(System.Guid)">
            <summary>
            Get the books for a specific author
            </summary>
            <param name="authorId">The id of the author</param>
            <returns>An ActionResult of IEnumerable of Books</returns>
        </member>
        <member name="M:Library.API.Controllers.BooksController.GetBook(System.Guid,System.Guid)">
            <summary>
                Get a book by id for a specific author
            </summary>
            <param name="authorId">The id of the book author</param>
            <param name="bookId">The id of the book</param>
            <returns>An ActionResult of Book</returns>
            <response code="200">Returns the requested book</response>
        </member>
        <member name="M:Library.API.Controllers.BooksController.GetBookWithConcatenatedAuthorName(System.Guid,System.Guid)">
            <summary>
                Get a book by id for a specific author
            </summary>
            <param name="authorId">The id of the book author</param>
            <param name="bookId">The id of the book</param>
            <returns>An ActionResult of BookWithConcatenatedAuthorName</returns>
            <response code="200">Returns the requested book with concatenated author name</response>
        </member>
        <member name="M:Library.API.Controllers.BooksController.CreateBook(System.Guid,Library.API.Models.BookForCreation)">
            <summary>
            Create a book for a specific author
            </summary>
            <param name="authorId">The id of the author</param>
            <param name="bookForCreation">The book to create</param>
            <returns>Return created book</returns>
            <response code="422">Validation error</response>
        </member>
        <member name="M:Library.API.Controllers.BooksController.CreateBookWithAmountOfPages(System.Guid,Library.API.Models.BookForCreationWithAmountOfPages)">
            <summary>
            Create a book for a specific author
            </summary>
            <param name="authorId">The id of the author</param>
            <param name="bookForCreation">The book to create</param>
            <returns>Return created book</returns>
            <response code="422">Validation error</response>
        </member>
        <member name="M:Library.API.Helpers.ICollectionExtensions.TryRemove``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                Try to remove an element in source ICollection of T if it exists
            </summary>
            <typeparam name="T">Type of ICollection</typeparam>
            <param name="source">Source ICollection</param>
            <param name="element">Element to remove</param>
            <returns>True if exist, false if not</returns>
        </member>
        <member name="T:Library.API.Models.Author">
            <summary>
                An author with Id, FirstName and LastName fields
            </summary>
        </member>
        <member name="P:Library.API.Models.Author.Id">
            <summary>
                Id of the author
            </summary>
        </member>
        <member name="P:Library.API.Models.Author.FirstName">
            <summary>
                First name of the author
            </summary>
        </member>
        <member name="P:Library.API.Models.Author.LastName">
            <summary>
                Last name of the author
            </summary>
        </member>
    </members>
</doc>
